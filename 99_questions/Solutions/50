<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<meta name="generator" content="MediaWiki 1.19.5-1+deb7u1" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="/haskellwiki/opensearch_desc.php" title="HaskellWiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://www.haskell.org/haskellwiki/api.php?action=rsd" />
<link rel="copyright" href="/haskellwiki/HaskellWiki:Copyrights" />
<link rel="alternate" type="application/atom+xml" title="HaskellWiki Atom feed" href="/haskellwiki/index.php?title=Special:RecentChanges&amp;feed=atom" />		<title>99 questions/Solutions/50 - HaskellWiki</title>
		<style type="text/css" media="screen, projection">/*<![CDATA[*/
			@import "/wikistatic/skins//common/shared.css?303";
			@import "/wikistatic/skins//hawiki/main.css?303";
		/*]]>*/</style>
		<link rel="stylesheet" type="text/css" media="print" href="/wikistatic/skins//common/commonPrint.css?303" />
		<!--[if lt IE 5.5000]><style type="text/css">@import "/wikistatic/skins//hawiki/IE50Fixes.css?303";</style><![endif]-->
		<!--[if IE 5.5000]><style type="text/css">@import "/wikistatic/skins//hawiki/IE55Fixes.css?303";</style><![endif]-->
		<!--[if IE 6]><style type="text/css">@import "/wikistatic/skins//hawiki/IE60Fixes.css?303";</style><![endif]-->
		<!--[if IE 7]><style type="text/css">@import "/wikistatic/skins//hawiki/IE70Fixes.css?303";</style><![endif]-->
		<!--[if lte IE 7]><script type="text/javascript" src="/wikistatic/skins//hawiki/IEFixes.js?303"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
                                                <script type="text/javascript">
                        var isMSIE55 = (window.showModalDialog && window.clipboardData && window.createPopup); /*alert("test: " + isMSIE55);*/</script>

		<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"99_questions/Solutions/50","wgTitle":"99 questions/Solutions/50","wgCurRevisionId":57455,"wgArticleId":6354,"wgIsArticle":true,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Programming exercise spoilers"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgRelevantPageName":"99_questions/Solutions/50","wgRestrictionEdit":[],"wgRestrictionMove":[]});
}</script>
		<script type="text/javascript" src="/wikistatic/skins//common/wikibits.js?303"><!-- wikibits js --></script>
		<!-- Head Scripts -->
<script src="http://www.haskell.org/haskellwiki/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=hawiki&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"99_questions/Solutions/50","wgTitle":"99 questions/Solutions/50","wgCurRevisionId":57455,"wgArticleId":6354,"wgIsArticle":true,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Programming exercise spoilers"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgRelevantPageName":"99_questions/Solutions/50","wgRestrictionEdit":[],"wgRestrictionMove":[]});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function($){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":1,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"hawiki","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,
"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;},{},{});mw.loader.implement("user.tokens",function($){mw.user.tokens.set({"editToken":"+\\","watchToken":false});;},{},{});

/* cache key: wikidb:resourceloader:filter:minify-js:7:befcdb5e3b24ff89f900613de9ed4ea3 */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax"]);
}</script><style type="text/css">/*<![CDATA[*/
.source-haskell {line-height: normal;}
.source-haskell li, .source-haskell pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for haskell
 * CSS class: source-haskell, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.haskell.source-haskell .de1, .haskell.source-haskell .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.haskell.source-haskell  {font-family:monospace;}
.haskell.source-haskell .imp {font-weight: bold; color: red;}
.haskell.source-haskell li, .haskell.source-haskell .li1 {font-weight: normal; vertical-align:top;}
.haskell.source-haskell .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.haskell.source-haskell .li2 {font-weight: bold; vertical-align:top;}
.haskell.source-haskell .kw1 {color: #06c; font-weight: bold;}
.haskell.source-haskell .kw2 {color: #06c; font-weight: bold;}
.haskell.source-haskell .kw3 {font-weight: bold;}
.haskell.source-haskell .kw4 {color: #cccc00; font-weight: bold;}
.haskell.source-haskell .kw5 {color: maroon;}
.haskell.source-haskell .co1 {color: #5d478b; font-style: italic;}
.haskell.source-haskell .co2 {color: #339933; font-weight: bold;}
.haskell.source-haskell .coMULTI {color: #5d478b; font-style: italic;}
.haskell.source-haskell .es0 {background-color: #3cb371; font-weight: bold;}
.haskell.source-haskell .br0 {color: green;}
.haskell.source-haskell .sy0 {color: #339933; font-weight: bold;}
.haskell.source-haskell .st0 {background-color: #3cb371;}
.haskell.source-haskell .nu0 {color: red;}
.haskell.source-haskell .me1 {color: #060;}
.haskell.source-haskell .ln-xtra, .haskell.source-haskell li.ln-xtra, .haskell.source-haskell div.ln-xtra {background-color: #ffc;}
.haskell.source-haskell span.xtra { display:block; }

/*]]>*/
</style>	</head>
<body class="mediawiki ltr ns-0 ns-subject page-99_questions_Solutions_50 skin-hawiki">
   <div id="topbar" class="noprint">
	<div class="portlet noprint" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul><li><a class="homebutton" href="/haskellwiki/Haskell">Home</a></li>
				<li id="pt-login"><a href="/haskellwiki/index.php?title=Special:UserLogin&amp;returnto=99+questions%2FSolutions%2F50">Log in</a></li>
			</ul>
		</div>
	</div>
        	  <div id="p-search">
	    <div id="searchBody" class="pBody">
	       <form action="/haskellwiki/index.php" id="searchform"><div>
	          <input type='hidden' name="title" value="Special:Search"/>
	          <input id="searchInput" name="search" type="text" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" />

	         </div></form>
	    </div>
	  </div>
   </div>
	<div id="globalWrapper">
	<div class="portlet" id="p-logo">
		<a style="background-image: url(/wikistatic/haskellwiki_logo.png);" href="/haskellwiki/Haskell"></a>
	</div>
	<div id="column-content">
        <div id="notice-area" class="noprint">
        <!-- ?php $this->data['sitenotice'] = 'This is a test instance.  Do not edit, your changes will be lost.'; ? -->
			        </div>
        <div id="content-wrapper">
	<div id="p-cactions" class="portlet noprint">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/haskellwiki/99_questions/Solutions/50">Page</a></li>
				 <li id="ca-talk" class="new"><a href="/haskellwiki/index.php?title=Talk:99_questions/Solutions/50&amp;action=edit&amp;redlink=1">Discussion</a></li>
				 <li id="ca-viewsource"><a href="/haskellwiki/index.php?title=99_questions/Solutions/50&amp;action=edit">View source</a></li>
				 <li id="ca-history"><a href="/haskellwiki/index.php?title=99_questions/Solutions/50&amp;action=history">History</a></li>			</ul>
		</div>
	</div>
                        <div id="content">
		<a name="top" id="top"></a>
                        <h1 id="firstHeading" class="firstHeading">99 questions/Solutions/50</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From HaskellWiki</h3>
			<div id="contentSub"><span class="subpages">&lt; <a href="/haskellwiki/99_questions" title="99 questions">99 questions</a> | <a href="/haskellwiki/99_questions/Solutions" title="99 questions/Solutions">Solutions</a></span></div>
			<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><p>(***) Huffman codes.
</p><p>We suppose a set of symbols with their frequencies, given as a list of fr(S,F) terms. Example: [fr(a,45),fr(b,13),fr(c,12),fr(d,16),fr(e,9),fr(f,5)]. Our objective is to construct a list hc(S,C) terms, where C is the Huffman code word for the symbol S. In our example, the result could be Hs = [hc(a,'0'), hc(b,'101'), hc(c,'100'), hc(d,'111'), hc(e,'1101'), hc(f,'1100')] [hc(a,'01'),...etc.]. The task shall be performed by the predicate huffman/2 defined as follows: 
</p>
<pre>
% huffman(Fs,Hs)&#160;:- Hs is the Huffman code table for the frequency table Fs
</pre>
<p>Solution:
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="kw1">import</span> Data<span class="sy0">.</span>List
<span class="kw1">import</span> Data<span class="sy0">.</span><span class="kw4">Ord</span> <span class="br0">&#40;</span>comparing<span class="br0">&#41;</span>
&#160;
<span class="kw1">data</span> HTree a <span class="sy0">=</span> Leaf a <span class="sy0">|</span> Branch <span class="br0">&#40;</span>HTree a<span class="br0">&#41;</span> <span class="br0">&#40;</span>HTree a<span class="br0">&#41;</span>
                <span class="kw1">deriving</span> <span class="kw4">Show</span>
&#160;
huffman <span class="sy0">::</span> <span class="br0">&#40;</span><span class="kw4">Ord</span> a<span class="sy0">,</span> <span class="kw4">Ord</span> w<span class="sy0">,</span> <span class="kw4">Num</span> w<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#91;</span><span class="br0">&#40;</span>a<span class="sy0">,</span>w<span class="br0">&#41;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="br0">&#40;</span>a<span class="sy0">,</span><span class="br0">&#91;</span><span class="kw4">Char</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
huffman freq <span class="sy0">=</span> sortBy <span class="br0">&#40;</span>comparing <span class="kw3">fst</span><span class="br0">&#41;</span> <span class="sy0">$</span> serialize <span class="sy0">$</span>
        htree <span class="sy0">$</span> sortBy <span class="br0">&#40;</span>comparing <span class="kw3">fst</span><span class="br0">&#41;</span> <span class="sy0">$</span> <span class="br0">&#91;</span><span class="br0">&#40;</span>w<span class="sy0">,</span> Leaf x<span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>x<span class="sy0">,</span>w<span class="br0">&#41;</span> <span class="sy0">&lt;-</span> freq<span class="br0">&#93;</span>
  <span class="kw1">where</span> htree <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="sy0">_,</span> t<span class="br0">&#41;</span><span class="br0">&#93;</span> <span class="sy0">=</span> t
        htree <span class="br0">&#40;</span><span class="br0">&#40;</span>w1<span class="sy0">,</span>t1<span class="br0">&#41;</span>:<span class="br0">&#40;</span>w2<span class="sy0">,</span>t2<span class="br0">&#41;</span>:wts<span class="br0">&#41;</span> <span class="sy0">=</span>
                htree <span class="sy0">$</span> insertBy <span class="br0">&#40;</span>comparing <span class="kw3">fst</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>w1 <span class="sy0">+</span> w2<span class="sy0">,</span> Branch t1 t2<span class="br0">&#41;</span> wts
        serialize <span class="br0">&#40;</span>Branch l r<span class="br0">&#41;</span> <span class="sy0">=</span>
                <span class="br0">&#91;</span><span class="br0">&#40;</span>x<span class="sy0">,</span> '0':code<span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>x<span class="sy0">,</span> code<span class="br0">&#41;</span> <span class="sy0">&lt;-</span> serialize l<span class="br0">&#93;</span> <span class="sy0">++</span>
                <span class="br0">&#91;</span><span class="br0">&#40;</span>x<span class="sy0">,</span> '1':code<span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>x<span class="sy0">,</span> code<span class="br0">&#41;</span> <span class="sy0">&lt;-</span> serialize r<span class="br0">&#93;</span>
        serialize <span class="br0">&#40;</span>Leaf x<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#40;</span>x<span class="sy0">,</span> <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span></pre></div></div>
<p>The argument to <tt>htree</tt> is a list of (weight, tree) pairs, in order of increasing weight.
The implementation could be made more efficient by using a priority queue instead of an ordered list.    
</p><p>Or, a solution that does not use trees:
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="kw1">import</span> List
<span class="co1">-- tupleUpdate - a function to record the Huffman codes; add string </span>
<span class="co1">--               &quot;1&quot; or &quot;0&quot; to element 'c' of tuple array ta</span>
<span class="co1">-- let ta = [('a',&quot;0&quot;),('b',&quot;1&quot;)]</span>
<span class="co1">-- tupleUpdate ta 'c' &quot;1&quot; =&gt;  [('c',&quot;1&quot;),('a',&quot;0&quot;),('b',&quot;1&quot;)]</span>
tupleUpdate <span class="sy0">::</span> <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">Char</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="kw4">Char</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="sy0">-&gt;</span>Char<span class="sy0">-&gt;</span>String <span class="sy0">-&gt;</span><span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">Char</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="kw4">Char</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
tupleUpdate ta el val 
   <span class="sy0">|</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw3">dropWhile</span><span class="br0">&#40;</span>\x <span class="sy0">-&gt;</span> <span class="br0">&#40;</span><span class="kw3">fst</span> x<span class="br0">&#41;</span><span class="sy0">/=</span> el<span class="br0">&#41;</span> ta<span class="br0">&#41;</span><span class="sy0">==</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">=</span> <span class="br0">&#40;</span>el<span class="sy0">,</span>val<span class="br0">&#41;</span>:ta
   <span class="sy0">|</span> <span class="kw3">otherwise</span> <span class="sy0">=</span> <span class="br0">&#40;</span>takeWhile <span class="br0">&#40;</span>\x <span class="sy0">-&gt;</span> <span class="br0">&#40;</span><span class="kw3">fst</span> x<span class="br0">&#41;</span><span class="sy0">/=</span>el<span class="br0">&#41;</span> ta<span class="br0">&#41;</span> <span class="sy0">++</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw3">fst</span><span class="br0">&#40;</span><span class="kw3">head</span> ha<span class="br0">&#41;</span><span class="sy0">,</span>val <span class="sy0">++</span> <span class="kw3">snd</span><span class="br0">&#40;</span><span class="kw3">head</span> ha<span class="br0">&#41;</span><span class="br0">&#41;</span>&#160;: <span class="br0">&#40;</span><span class="kw3">tail</span> <span class="br0">&#40;</span><span class="kw3">dropWhile</span> <span class="br0">&#40;</span>\x <span class="sy0">-&gt;</span> <span class="br0">&#40;</span><span class="kw3">fst</span> x<span class="br0">&#41;</span><span class="sy0">/=</span>el<span class="br0">&#41;</span> ta<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
      <span class="kw1">where</span> ha <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#40;</span>xx<span class="sy0">,</span>yy<span class="br0">&#41;</span><span class="sy0">|</span><span class="br0">&#40;</span>xx<span class="sy0">,</span>yy<span class="br0">&#41;</span> <span class="sy0">&lt;-</span> ta<span class="sy0">,</span>xx <span class="sy0">==</span>el<span class="br0">&#93;</span>
&#160;
<span class="co1">-- tupleUpdater - wrapper for tupleUpdate, use a list decomposition &quot;for loop&quot; </span>
<span class="co1">-- let ta = [('a',&quot;0&quot;),('b',&quot;1&quot;)]</span>
<span class="co1">-- tupleUpdater ta &quot;fe&quot; &quot;1&quot; =&gt; [('e',&quot;1&quot;),('f',&quot;1&quot;),('a',&quot;0&quot;),('b',&quot;1&quot;)]</span>
tupleUpdater <span class="sy0">::</span> <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">Char</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="kw4">Char</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="sy0">-&gt;</span>String<span class="sy0">-&gt;</span>String <span class="sy0">-&gt;</span><span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">Char</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="kw4">Char</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
tupleUpdater a <span class="br0">&#40;</span>x:xs<span class="br0">&#41;</span> c <span class="sy0">=</span>  tupleUpdater <span class="br0">&#40;</span>tupleUpdate a x c<span class="br0">&#41;</span> xs c
tupleUpdater a <span class="br0">&#91;</span><span class="br0">&#93;</span> c <span class="sy0">=</span> a 
&#160;
<span class="co1">-- huffer - recursively run the encoding algorithm and record the left/right </span>
<span class="co1">--          codes as they are discovered in argument hc, which starts as [] </span>
<span class="co1">-- let ha =[(45,&quot;a&quot;),(13,&quot;b&quot;),(12,&quot;c&quot;),(16,&quot;d&quot;),(9,&quot;e&quot;),(5,&quot;f&quot;)]</span>
<span class="co1">-- huffer ha [] =&gt; ([(100,&quot;acbfed&quot;)],[('a',&quot;0&quot;),('b',&quot;101&quot;),('c',&quot;100&quot;),('d',&quot;111&quot;),('e',&quot;1101&quot;),('f',&quot;1100&quot;)])</span>
huffer <span class="sy0">::</span> <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">Integer</span><span class="sy0">,</span><span class="kw4">String</span><span class="br0">&#41;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">Char</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="kw4">Char</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="sy0">-&gt;</span> <span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">Integer</span><span class="sy0">,</span><span class="kw4">String</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">Char</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="kw4">Char</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
huffer ha hc 
   <span class="sy0">|</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw3">length</span> ha<span class="br0">&#41;</span><span class="sy0">==</span>1<span class="br0">&#41;</span><span class="sy0">=</span><span class="br0">&#40;</span>ha<span class="sy0">,</span>sort hc<span class="br0">&#41;</span>
   <span class="sy0">|</span> <span class="kw3">otherwise</span>       <span class="sy0">=</span> huffer <span class="br0">&#40;</span><span class="br0">&#40;</span>num<span class="sy0">,</span>str<span class="br0">&#41;</span>: <span class="kw3">tail</span><span class="br0">&#40;</span><span class="kw3">tail</span><span class="br0">&#40;</span>has<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span> hc2
       <span class="kw1">where</span> num   <span class="sy0">=</span> <span class="kw3">fst</span> <span class="br0">&#40;</span><span class="kw3">head</span> has<span class="br0">&#41;</span>  <span class="sy0">+</span> <span class="kw3">fst</span> <span class="br0">&#40;</span><span class="kw3">head</span> <span class="br0">&#40;</span><span class="kw3">tail</span> has<span class="br0">&#41;</span><span class="br0">&#41;</span>
             left  <span class="sy0">=</span> <span class="kw3">snd</span> <span class="br0">&#40;</span><span class="kw3">head</span> has<span class="br0">&#41;</span>
             rght  <span class="sy0">=</span> <span class="kw3">snd</span> <span class="br0">&#40;</span><span class="kw3">head</span> <span class="br0">&#40;</span><span class="kw3">tail</span> has<span class="br0">&#41;</span><span class="br0">&#41;</span>
             str   <span class="sy0">=</span> left  <span class="sy0">++</span> rght
             has   <span class="sy0">=</span> sort ha
             hc2   <span class="sy0">=</span> tupleUpdater <span class="br0">&#40;</span>tupleUpdater hc rght <span class="st0">&quot;1&quot;</span><span class="br0">&#41;</span> left <span class="st0">&quot;0&quot;</span>
&#160;
<span class="co1">-- huffman - wrapper for huffer to convert the input to a format huffer likes </span>
<span class="co1">--           and extract the output to match the problem specification</span>
huffman <span class="sy0">::</span> <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">Char</span><span class="sy0">,</span><span class="kw4">Integer</span><span class="br0">&#41;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">Char</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="kw4">Char</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
huffman h <span class="sy0">=</span> <span class="kw3">snd</span><span class="br0">&#40;</span>huffer <span class="br0">&#40;</span><span class="kw3">zip</span> <span class="br0">&#40;</span><span class="kw3">map</span> <span class="kw3">snd</span> h<span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw3">map</span> <span class="br0">&#40;</span>:<span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw3">map</span> <span class="kw3">fst</span> h<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span></pre></div></div>
<p>A relatively short solution:
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="kw1">import</span> Data<span class="sy0">.</span>List <span class="br0">&#40;</span>sortBy<span class="sy0">,</span> insertBy<span class="br0">&#41;</span>
<span class="kw1">import</span> Data<span class="sy0">.</span><span class="kw4">Ord</span> <span class="br0">&#40;</span>comparing<span class="br0">&#41;</span>
<span class="kw1">import</span> Control<span class="sy0">.</span>Arrow <span class="br0">&#40;</span>second<span class="br0">&#41;</span>
&#160;
huffman <span class="sy0">::</span> <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">Char</span><span class="sy0">,</span> <span class="kw4">Int</span><span class="br0">&#41;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">Char</span><span class="sy0">,</span> <span class="kw4">String</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
huffman <span class="sy0">=</span>
  <span class="kw1">let</span> shrink <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="sy0">_,</span> ys<span class="br0">&#41;</span><span class="br0">&#93;</span> <span class="sy0">=</span> sortBy <span class="br0">&#40;</span>comparing <span class="kw3">fst</span><span class="br0">&#41;</span> ys
      shrink <span class="br0">&#40;</span>x1:x2:xs<span class="br0">&#41;</span> <span class="sy0">=</span> shrink <span class="sy0">$</span> insertBy <span class="br0">&#40;</span>comparing <span class="kw3">fst</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>add x1 x2<span class="br0">&#41;</span> xs
      add <span class="br0">&#40;</span>p1<span class="sy0">,</span> xs1<span class="br0">&#41;</span> <span class="br0">&#40;</span>p2<span class="sy0">,</span> xs2<span class="br0">&#41;</span> <span class="sy0">=</span>
        <span class="br0">&#40;</span>p1 <span class="sy0">+</span> p2<span class="sy0">,</span> <span class="kw3">map</span> <span class="br0">&#40;</span>second <span class="br0">&#40;</span>'0':<span class="br0">&#41;</span><span class="br0">&#41;</span> xs1 <span class="sy0">++</span> <span class="kw3">map</span> <span class="br0">&#40;</span>second <span class="br0">&#40;</span>'1':<span class="br0">&#41;</span><span class="br0">&#41;</span> xs2<span class="br0">&#41;</span>
  <span class="kw1">in</span>  shrink <span class="sy0">.</span> <span class="kw3">map</span> <span class="br0">&#40;</span>\<span class="br0">&#40;</span>c<span class="sy0">,</span> p<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="br0">&#40;</span>p<span class="sy0">,</span> <span class="br0">&#91;</span><span class="br0">&#40;</span>c <span class="sy0">,</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">.</span> sortBy <span class="br0">&#40;</span>comparing <span class="kw3">snd</span><span class="br0">&#41;</span></pre></div></div>
<p><br />
Another short solution that's relatively easy to understand (I'll be back to comment later):
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="kw1">import</span> <span class="kw1">qualified</span> Data<span class="sy0">.</span>List <span class="kw1">as</span> L
&#160;
huffman <span class="sy0">::</span> <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">Char</span><span class="sy0">,</span> <span class="kw4">Int</span><span class="br0">&#41;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">Char</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="kw4">Char</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
huffman x <span class="sy0">=</span> reformat <span class="sy0">$</span> huffman<span class="sy0">_</span>combine <span class="sy0">$</span> resort <span class="sy0">$</span> morph x
	<span class="kw1">where</span>
		morph x <span class="sy0">=</span> <span class="br0">&#91;</span> <span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy0">,</span><span class="br0">&#91;</span>c<span class="br0">&#93;</span><span class="sy0">,</span>n<span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>c<span class="sy0">,</span>n<span class="br0">&#41;</span> <span class="sy0">&lt;-</span> x <span class="br0">&#93;</span>
		resort x <span class="sy0">=</span> L<span class="sy0">.</span>sortBy <span class="br0">&#40;</span>\<span class="br0">&#40;</span><span class="sy0">_,_,</span>a<span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="sy0">_,_,</span>b<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="kw3">compare</span> a b<span class="br0">&#41;</span> x
&#160;
		reformat <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="sy0">,_</span><span class="br0">&#41;</span> <span class="sy0">=</span> L<span class="sy0">.</span>sortBy <span class="br0">&#40;</span>\<span class="br0">&#40;</span>a<span class="sy0">,</span>b<span class="br0">&#41;</span> <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="kw3">compare</span> <span class="br0">&#40;</span><span class="kw3">length</span> b<span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw3">length</span> y<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">$</span> <span class="kw3">zip</span> y x
&#160;
		huffman<span class="sy0">_</span>combine <span class="br0">&#40;</span>x:<span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy0">=</span> x
		huffman<span class="sy0">_</span>combine <span class="br0">&#40;</span>x:xs<span class="br0">&#41;</span> <span class="sy0">=</span> huffman<span class="sy0">_</span>combine <span class="sy0">$</span> resort <span class="br0">&#40;</span> <span class="br0">&#40;</span>combine<span class="sy0">_</span>elements x <span class="br0">&#40;</span><span class="kw3">head</span> xs<span class="br0">&#41;</span><span class="br0">&#41;</span>&#160;: <span class="br0">&#40;</span><span class="kw3">tail</span> xs<span class="br0">&#41;</span> <span class="br0">&#41;</span>
			<span class="kw1">where</span>
				combine<span class="sy0">_</span>elements <span class="br0">&#40;</span>a<span class="sy0">,</span>b<span class="sy0">,</span>c<span class="br0">&#41;</span> <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="sy0">,</span>z<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="br0">&#40;</span> <span class="br0">&#40;</span><span class="kw3">map</span> <span class="br0">&#40;</span>'0':<span class="br0">&#41;</span> a<span class="br0">&#41;</span> <span class="sy0">++</span> <span class="br0">&#40;</span><span class="kw3">map</span> <span class="br0">&#40;</span>'<span class="nu0">1</span>':<span class="br0">&#41;</span> x<span class="br0">&#41;</span><span class="sy0">,</span> b <span class="sy0">++</span> y<span class="sy0">,</span> c<span class="sy0">+</span>z<span class="br0">&#41;</span></pre></div></div>

<!-- 
NewPP limit report
Preprocessor node count: 16/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:6354-0!*!*!*!*!*!* and timestamp 20141003041009 -->
</div><div class="printfooter">
Retrieved from "<a href="http://www.haskell.org/haskellwiki/index.php?title=99_questions/Solutions/50&amp;oldid=57455">http://www.haskell.org/haskellwiki/index.php?title=99_questions/Solutions/50&amp;oldid=57455</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/haskellwiki/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="/haskellwiki/Category:Programming_exercise_spoilers" title="Category:Programming exercise spoilers">Programming exercise spoilers</a></li></ul></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div></div>
		<div id="column-one">
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage"><a href="/haskellwiki/Haskell">Haskell</a></li>
				<li id="n-portal"><a href="/haskellwiki/HaskellWiki:Community">Wiki community</a></li>
				<li id="n-recentchanges"><a href="/haskellwiki/Special:RecentChanges">Recent changes</a></li>
				<li id="n-randompage"><a href="/haskellwiki/Special:Random">Random page</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/haskellwiki/Special:WhatLinksHere/99_questions/Solutions/50">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/haskellwiki/Special:RecentChangesLinked/99_questions/Solutions/50">Related changes</a></li>
<li id="t-specialpages"><a href="/haskellwiki/Special:SpecialPages">Special pages</a></li>
				<li id="t-print"><a href="/haskellwiki/index.php?title=99_questions/Solutions/50&amp;printable=yes" rel="alternate">Printable version</a></li>				<li id="t-permalink"><a href="/haskellwiki/index.php?title=99_questions/Solutions/50&amp;oldid=57455">Permanent link</a></li>			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="//www.mediawiki.org/"><img src="/wikistatic/skins//common/images/poweredby_mediawiki_88x31.png" height="31" width="88" alt="Powered by MediaWiki" /></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 18 January 2014, at 19:53.</li>
					<li id="viewcount">This page has been accessed 4,246 times.</li>
					<li id="copyright">Recent content is available under <a href="/haskellwiki/HaskellWiki:Copyrights" title="HaskellWiki:Copyrights">a simple permissive license</a>.</li>
					<li id="privacy"><a href="/haskellwiki/HaskellWiki:Privacy_policy" title="HaskellWiki:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/haskellwiki/HaskellWiki:About" title="HaskellWiki:About">About HaskellWiki</a></li>
					<li id="disclaimer"><a href="/haskellwiki/HaskellWiki:General_disclaimer" title="HaskellWiki:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>
<script>if(window.mw){
mw.loader.load(["mediawiki.user","mediawiki.page.ready"], null, true);
}</script>
<script src="http://www.haskell.org/haskellwiki/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=hawiki&amp;*"></script>
<!-- Served in 0.122 secs. --><script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-15375175-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body></html>
