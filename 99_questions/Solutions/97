<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<meta name="generator" content="MediaWiki 1.19.5-1+deb7u1" />
<link rel="canonical" href="/haskellwiki/Sudoku" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="/haskellwiki/opensearch_desc.php" title="HaskellWiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://www.haskell.org/haskellwiki/api.php?action=rsd" />
<link rel="copyright" href="/haskellwiki/HaskellWiki:Copyrights" />
<link rel="alternate" type="application/atom+xml" title="HaskellWiki Atom feed" href="/haskellwiki/index.php?title=Special:RecentChanges&amp;feed=atom" />		<title>Sudoku - HaskellWiki</title>
		<style type="text/css" media="screen, projection">/*<![CDATA[*/
			@import "/wikistatic/skins//common/shared.css?303";
			@import "/wikistatic/skins//hawiki/main.css?303";
		/*]]>*/</style>
		<link rel="stylesheet" type="text/css" media="print" href="/wikistatic/skins//common/commonPrint.css?303" />
		<!--[if lt IE 5.5000]><style type="text/css">@import "/wikistatic/skins//hawiki/IE50Fixes.css?303";</style><![endif]-->
		<!--[if IE 5.5000]><style type="text/css">@import "/wikistatic/skins//hawiki/IE55Fixes.css?303";</style><![endif]-->
		<!--[if IE 6]><style type="text/css">@import "/wikistatic/skins//hawiki/IE60Fixes.css?303";</style><![endif]-->
		<!--[if IE 7]><style type="text/css">@import "/wikistatic/skins//hawiki/IE70Fixes.css?303";</style><![endif]-->
		<!--[if lte IE 7]><script type="text/javascript" src="/wikistatic/skins//hawiki/IEFixes.js?303"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
                                                <script type="text/javascript">
                        var isMSIE55 = (window.showModalDialog && window.clipboardData && window.createPopup); /*alert("test: " + isMSIE55);*/</script>

		<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Sudoku","wgTitle":"Sudoku","wgCurRevisionId":56707,"wgArticleId":1698,"wgIsArticle":true,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Code"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgRelevantPageName":"Sudoku","wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRedirectedFrom":"99_questions/Solutions/97"});
}</script>
		<script type="text/javascript" src="/wikistatic/skins//common/wikibits.js?303"><!-- wikibits js --></script>
		<!-- Head Scripts -->
<script src="http://www.haskell.org/haskellwiki/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=hawiki&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Sudoku","wgTitle":"Sudoku","wgCurRevisionId":56707,"wgArticleId":1698,"wgIsArticle":true,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Code"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgRelevantPageName":"Sudoku","wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRedirectedFrom":"99_questions/Solutions/97"});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function($){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":1,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"hawiki","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,
"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;},{},{});mw.loader.implement("user.tokens",function($){mw.user.tokens.set({"editToken":"+\\","watchToken":false});;},{},{});

/* cache key: wikidb:resourceloader:filter:minify-js:7:befcdb5e3b24ff89f900613de9ed4ea3 */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax"]);
}</script><style type="text/css">/*<![CDATA[*/
.source-haskell {line-height: normal;}
.source-haskell li, .source-haskell pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for haskell
 * CSS class: source-haskell, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.haskell.source-haskell .de1, .haskell.source-haskell .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.haskell.source-haskell  {font-family:monospace;}
.haskell.source-haskell .imp {font-weight: bold; color: red;}
.haskell.source-haskell li, .haskell.source-haskell .li1 {font-weight: normal; vertical-align:top;}
.haskell.source-haskell .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.haskell.source-haskell .li2 {font-weight: bold; vertical-align:top;}
.haskell.source-haskell .kw1 {color: #06c; font-weight: bold;}
.haskell.source-haskell .kw2 {color: #06c; font-weight: bold;}
.haskell.source-haskell .kw3 {font-weight: bold;}
.haskell.source-haskell .kw4 {color: #cccc00; font-weight: bold;}
.haskell.source-haskell .kw5 {color: maroon;}
.haskell.source-haskell .co1 {color: #5d478b; font-style: italic;}
.haskell.source-haskell .co2 {color: #339933; font-weight: bold;}
.haskell.source-haskell .coMULTI {color: #5d478b; font-style: italic;}
.haskell.source-haskell .es0 {background-color: #3cb371; font-weight: bold;}
.haskell.source-haskell .br0 {color: green;}
.haskell.source-haskell .sy0 {color: #339933; font-weight: bold;}
.haskell.source-haskell .st0 {background-color: #3cb371;}
.haskell.source-haskell .nu0 {color: red;}
.haskell.source-haskell .me1 {color: #060;}
.haskell.source-haskell .ln-xtra, .haskell.source-haskell li.ln-xtra, .haskell.source-haskell div.ln-xtra {background-color: #ffc;}
.haskell.source-haskell span.xtra { display:block; }

/*]]>*/
</style>	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Sudoku skin-hawiki">
   <div id="topbar" class="noprint">
	<div class="portlet noprint" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul><li><a class="homebutton" href="/haskellwiki/Haskell">Home</a></li>
				<li id="pt-login"><a href="/haskellwiki/index.php?title=Special:UserLogin&amp;returnto=99+questions%2FSolutions%2F97">Log in</a></li>
			</ul>
		</div>
	</div>
        	  <div id="p-search">
	    <div id="searchBody" class="pBody">
	       <form action="/haskellwiki/index.php" id="searchform"><div>
	          <input type='hidden' name="title" value="Special:Search"/>
	          <input id="searchInput" name="search" type="text" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" />

	         </div></form>
	    </div>
	  </div>
   </div>
	<div id="globalWrapper">
	<div class="portlet" id="p-logo">
		<a style="background-image: url(/wikistatic/haskellwiki_logo.png);" href="/haskellwiki/Haskell"></a>
	</div>
	<div id="column-content">
        <div id="notice-area" class="noprint">
        <!-- ?php $this->data['sitenotice'] = 'This is a test instance.  Do not edit, your changes will be lost.'; ? -->
			        </div>
        <div id="content-wrapper">
	<div id="p-cactions" class="portlet noprint">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/haskellwiki/Sudoku">Page</a></li>
				 <li id="ca-talk"><a href="/haskellwiki/Talk:Sudoku">Discussion</a></li>
				 <li id="ca-viewsource"><a href="/haskellwiki/index.php?title=Sudoku&amp;action=edit">View source</a></li>
				 <li id="ca-history"><a href="/haskellwiki/index.php?title=Sudoku&amp;action=history">History</a></li>			</ul>
		</div>
	</div>
                        <div id="content">
		<a name="top" id="top"></a>
                        <h1 id="firstHeading" class="firstHeading">Sudoku</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From HaskellWiki</h3>
			<div id="contentSub">(Redirected from <a href="/haskellwiki/index.php?title=99_questions/Solutions/97&amp;redirect=no" title="99 questions/Solutions/97">99 questions/Solutions/97</a>)</div>
			<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><p><br />
Here are a few Sudoku solvers coded up in Haskell...
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Monadic_non-deterministic_solver"><span class="tocnumber">1</span> <span class="toctext">Monadic non-deterministic solver</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Simple_solver"><span class="tocnumber">2</span> <span class="toctext">Simple solver</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Complete_decision_tree"><span class="tocnumber">3</span> <span class="toctext">Complete decision tree</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Exact_set_cover_solver"><span class="tocnumber">4</span> <span class="toctext">Exact set cover solver</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#No_guessing"><span class="tocnumber">5</span> <span class="toctext">No guessing</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="#Just_guessing"><span class="tocnumber">6</span> <span class="toctext">Just guessing</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="#Very_smart.2C_with_only_a_little_guessing"><span class="tocnumber">7</span> <span class="toctext">Very smart, with only a little guessing</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="#Only_guessing_without_dancing_links"><span class="tocnumber">8</span> <span class="toctext">Only guessing without dancing links</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="#Generalized_solver"><span class="tocnumber">9</span> <span class="toctext">Generalized solver</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="#Simple_small_solver"><span class="tocnumber">10</span> <span class="toctext">Simple small solver</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="#Backtrack_monad_solver"><span class="tocnumber">11</span> <span class="toctext">Backtrack monad solver</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="#In-flight_entertainment"><span class="tocnumber">12</span> <span class="toctext">In-flight entertainment</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="#Sudoku_incrementally.2C_.C3.A0_la_Bird"><span class="tocnumber">13</span> <span class="toctext">Sudoku incrementally, à la Bird</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="#607_bytes_.2F_12_lines"><span class="tocnumber">14</span> <span class="toctext">607 bytes / 12 lines</span></a></li>
<li class="toclevel-1 tocsection-15"><a href="#A_parallel_solver"><span class="tocnumber">15</span> <span class="toctext">A parallel solver</span></a></li>
<li class="toclevel-1 tocsection-16"><a href="#Another_simple_solver"><span class="tocnumber">16</span> <span class="toctext">Another simple solver</span></a></li>
<li class="toclevel-1 tocsection-17"><a href="#Constraint_Propagation_.28a_la_Norvig.29"><span class="tocnumber">17</span> <span class="toctext">Constraint Propagation (a la Norvig)</span></a></li>
<li class="toclevel-1 tocsection-18"><a href="#Concurrent_STM_Solver"><span class="tocnumber">18</span> <span class="toctext">Concurrent STM Solver</span></a></li>
<li class="toclevel-1 tocsection-19"><a href="#Chaining_style_Solver"><span class="tocnumber">19</span> <span class="toctext">Chaining style Solver</span></a></li>
<li class="toclevel-1 tocsection-20"><a href="#Finite_Domain_Constraint_Solver"><span class="tocnumber">20</span> <span class="toctext">Finite Domain Constraint Solver</span></a></li>
<li class="toclevel-1 tocsection-21"><a href="#Very_fast_Solver"><span class="tocnumber">21</span> <span class="toctext">Very fast Solver</span></a></li>
<li class="toclevel-1 tocsection-22"><a href="#List_comprehensions"><span class="tocnumber">22</span> <span class="toctext">List comprehensions</span></a></li>
<li class="toclevel-1 tocsection-23"><a href="#Add_your_own"><span class="tocnumber">23</span> <span class="toctext">Add your own</span></a></li>
<li class="toclevel-1 tocsection-24"><a href="#Test_boards"><span class="tocnumber">24</span> <span class="toctext">Test boards</span></a></li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Monadic_non-deterministic_solver">1  Monadic non-deterministic solver </span></h2>
<p>Here is a solver by CaleGibbard.  It possibly looks even more naïve than it actually is.  This does a backtracking search, trying possibilities until it finds one which works, and backtracking when it can no longer make a legal move.
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="kw1">import</span> MonadNondet <span class="br0">&#40;</span>option<span class="br0">&#41;</span>
<span class="kw1">import</span> Sudoku
<span class="kw1">import</span> System
<span class="kw1">import</span> Control<span class="sy0">.</span><span class="kw4">Monad</span>
&#160;
solve <span class="sy0">=</span> forM <span class="br0">&#91;</span><span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span> <span class="sy0">|</span> i <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="sy0">,</span> j <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="br0">&#93;</span> <span class="sy0">$</span> \<span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="kw1">do</span>
    v <span class="sy0">&lt;-</span> valAt <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span>       <span class="co1">-- ^ for each board position</span>
    when <span class="br0">&#40;</span>v <span class="sy0">==</span> 0<span class="br0">&#41;</span> <span class="sy0">$</span> <span class="kw1">do</span>     <span class="co1">-- if it's empty (we represent that with a 0)</span>
        a <span class="sy0">&lt;-</span> option <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span> <span class="co1">-- pick a number</span>
        place <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span> a      <span class="co1">-- and try to put it there</span>
&#160;
main <span class="sy0">=</span> <span class="kw1">do</span>
    <span class="br0">&#91;</span>f<span class="br0">&#93;</span> <span class="sy0">&lt;-</span> getArgs
    xs <span class="sy0">&lt;-</span> <span class="kw3">readFile</span> f
    <span class="kw3">putStrLn</span> <span class="sy0">.</span> evalSudoku <span class="sy0">$</span> <span class="kw1">do</span> <span class="br0">&#123;</span> readSudoku xs; solve; showSudoku <span class="br0">&#125;</span></pre></div></div>
<p>Now, to the meat of the thing, the monad which makes the above look so nice. We construct a monad which is suitable for maintaining Sudoku grids and trying options nondeterministically. Note that outside of this module, it's impossible to create a state which has an invalid Sudoku grid, since the only way to update the state handles the check to ensure that the move is legal.
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="coMULTI">{-# OPTIONS_GHC -fglasgow-exts #-}</span>
<span class="kw1">module</span> Sudoku 
    <span class="br0">&#40;</span>Sudoku<span class="sy0">,</span>
     readSudoku<span class="sy0">,</span>
     runSudoku<span class="sy0">,</span>
     evalSudoku<span class="sy0">,</span>
     execSudoku<span class="sy0">,</span>
     showSudoku<span class="sy0">,</span>
     valAt<span class="sy0">,</span> rowAt<span class="sy0">,</span> colAt<span class="sy0">,</span> boxAt<span class="sy0">,</span>
     place<span class="br0">&#41;</span>
     <span class="kw1">where</span>
<span class="kw1">import</span> Data<span class="sy0">.</span>Array<span class="sy0">.</span>Diff
<span class="kw1">import</span> MonadNondet
<span class="kw1">import</span> Control<span class="sy0">.</span><span class="kw4">Monad</span><span class="sy0">.</span>State
&#160;
<span class="co1">-- Nondet here is a drop-in replacement for [] (the list monad) which just runs a little faster.</span>
<span class="kw1">newtype</span> Sudoku a <span class="sy0">=</span> Sudoku <span class="br0">&#40;</span>StateT <span class="br0">&#40;</span>DiffUArray <span class="br0">&#40;</span><span class="kw4">Int</span><span class="sy0">,</span><span class="kw4">Int</span><span class="br0">&#41;</span> <span class="kw4">Int</span><span class="br0">&#41;</span> Nondet a<span class="br0">&#41;</span>
    <span class="kw1">deriving</span> <span class="br0">&#40;</span><span class="kw4">Functor</span><span class="sy0">,</span> <span class="kw4">Monad</span><span class="sy0">,</span> MonadPlus<span class="br0">&#41;</span>
&#160;
<span class="coMULTI">{- -- That is, we could also use the following, which works exactly the same way.
newtype Sudoku a = Sudoku (StateT (DiffUArray (Int,Int) Int) [] a)
    deriving (Functor, Monad, MonadPlus)
-}</span>
&#160;
initialSudokuArray <span class="sy0">=</span> listArray <span class="br0">&#40;</span><span class="br0">&#40;</span>1<span class="sy0">,</span>1<span class="br0">&#41;</span><span class="sy0">,</span><span class="br0">&#40;</span>9<span class="sy0">,</span>9<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#91;</span>0<span class="sy0">,</span>0<span class="sy0">..</span><span class="br0">&#93;</span>
&#160;
runSudoku <span class="br0">&#40;</span>Sudoku k<span class="br0">&#41;</span> <span class="sy0">=</span> runNondet <span class="br0">&#40;</span>runStateT k initialSudokuArray<span class="br0">&#41;</span>
&#160;
evalSudoku <span class="sy0">=</span> <span class="kw3">fst</span> <span class="sy0">.</span> runSudoku
execSudoku <span class="sy0">=</span> <span class="kw3">snd</span> <span class="sy0">.</span> runSudoku
&#160;
showSudoku <span class="sy0">=</span> Sudoku <span class="sy0">$</span> <span class="kw1">do</span>
    a <span class="sy0">&lt;-</span> get
    <span class="kw3">return</span> <span class="sy0">$</span> <span class="kw3">unlines</span> <span class="br0">&#91;</span><span class="kw3">unwords</span> <span class="br0">&#91;</span><span class="kw3">show</span> <span class="br0">&#40;</span>a <span class="sy0">!</span> <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">|</span> j <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="br0">&#93;</span> <span class="sy0">|</span> i <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="br0">&#93;</span>
&#160;
readSudoku <span class="sy0">::</span> <span class="kw4">String</span> <span class="sy0">-&gt;</span> Sudoku <span class="br0">&#40;</span><span class="br0">&#41;</span>
readSudoku xs <span class="sy0">=</span> <span class="kw3">sequence_</span> <span class="sy0">$</span> <span class="kw1">do</span>
    <span class="br0">&#40;</span>i<span class="sy0">,</span>ys<span class="br0">&#41;</span> <span class="sy0">&lt;-</span> <span class="kw3">zip</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span> <span class="br0">&#40;</span><span class="kw3">lines</span> xs<span class="br0">&#41;</span>
    <span class="br0">&#40;</span>j<span class="sy0">,</span>n<span class="br0">&#41;</span>  <span class="sy0">&lt;-</span> <span class="kw3">zip</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span> <span class="br0">&#40;</span><span class="kw3">words</span> ys<span class="br0">&#41;</span>
    <span class="kw3">return</span> <span class="sy0">$</span> place <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw3">read</span> n<span class="br0">&#41;</span>
&#160;
valAt' <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw1">do</span>
    a <span class="sy0">&lt;-</span> get
    <span class="kw3">return</span> <span class="br0">&#40;</span>a <span class="sy0">!</span> <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span><span class="br0">&#41;</span>
&#160;
rowAt' <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw3">mapM</span> valAt' <span class="br0">&#91;</span><span class="br0">&#40;</span>i<span class="sy0">,</span> k<span class="br0">&#41;</span> <span class="sy0">|</span> k <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="br0">&#93;</span>
&#160;
colAt' <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw3">mapM</span> valAt' <span class="br0">&#91;</span><span class="br0">&#40;</span>k<span class="sy0">,</span> j<span class="br0">&#41;</span> <span class="sy0">|</span> k <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="br0">&#93;</span> 
&#160;
boxAt' <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw3">mapM</span> valAt' <span class="br0">&#91;</span><span class="br0">&#40;</span>i' <span class="sy0">+</span> u<span class="sy0">,</span> j' <span class="sy0">+</span> v<span class="br0">&#41;</span> <span class="sy0">|</span> u <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>3<span class="br0">&#93;</span><span class="sy0">,</span> v <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>3<span class="br0">&#93;</span><span class="br0">&#93;</span>
  <span class="kw1">where</span> i' <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>i<span class="sy0">-</span>1<span class="br0">&#41;</span> `<span class="kw3">div</span>` 3<span class="br0">&#41;</span> <span class="sy0">*</span> 3
        j' <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>j<span class="sy0">-</span>1<span class="br0">&#41;</span> `<span class="kw3">div</span>` <span class="nu0">3</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">3</span>
&#160;
valAt <span class="sy0">=</span> Sudoku <span class="sy0">.</span> valAt'
rowAt <span class="sy0">=</span> Sudoku <span class="sy0">.</span> rowAt'
colAt <span class="sy0">=</span> Sudoku <span class="sy0">.</span> colAt'
boxAt <span class="sy0">=</span> Sudoku <span class="sy0">.</span> boxAt'
&#160;
<span class="co1">-- This is the least trivial part.</span>
<span class="co1">-- It just guards to make sure that the move is legal,</span>
<span class="co1">-- and updates the array in the state if it is.</span>
place <span class="sy0">::</span> <span class="br0">&#40;</span><span class="kw4">Int</span><span class="sy0">,</span><span class="kw4">Int</span><span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="kw4">Int</span> <span class="sy0">-&gt;</span> Sudoku <span class="br0">&#40;</span><span class="br0">&#41;</span>
place <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span> n <span class="sy0">=</span> Sudoku <span class="sy0">$</span> <span class="kw1">do</span>
    v <span class="sy0">&lt;-</span> valAt' <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span>
    when <span class="br0">&#40;</span>v <span class="sy0">==</span> 0 <span class="sy0">&amp;&amp;</span> n <span class="sy0">/=</span> 0<span class="br0">&#41;</span> <span class="sy0">$</span> <span class="kw1">do</span>
        rs <span class="sy0">&lt;-</span> rowAt' <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span>
        cs <span class="sy0">&lt;-</span> colAt' <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span>
        bs <span class="sy0">&lt;-</span> boxAt' <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span>
        guard <span class="sy0">$</span> <span class="br0">&#40;</span>n `<span class="kw3">notElem</span>`<span class="br0">&#41;</span> <span class="sy0">$</span> rs <span class="sy0">++</span> cs <span class="sy0">++</span> bs
        a <span class="sy0">&lt;-</span> get
        put <span class="br0">&#40;</span>a <span class="sy0">//</span> <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span><span class="sy0">,</span>n<span class="br0">&#41;</span><span class="br0">&#93;</span><span class="br0">&#41;</span></pre></div></div>
<p>This is a fast NonDeterminism monad. It's a drop-in replacement for the list monad in this case. It's twice as fast when compiled with optimisations but a little slower without. You can also find it on the wiki at NonDeterminism.
</p><p>I've made a few small modifications to this one to hopefully make it more concretely readable.
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="coMULTI">{-# OPTIONS_GHC -fglasgow-exts #-}</span>
&#160;
<span class="kw1">module</span> MonadNondet <span class="kw1">where</span>
&#160;
<span class="kw1">import</span> Control<span class="sy0">.</span><span class="kw4">Monad</span>
<span class="kw1">import</span> Control<span class="sy0">.</span><span class="kw4">Monad</span><span class="sy0">.</span>Trans
&#160;
<span class="kw1">import</span> Control<span class="sy0">.</span><span class="kw4">Monad</span><span class="sy0">.</span>Identity
&#160;
<span class="kw1">newtype</span> NondetT m a
  <span class="sy0">=</span> NondetT <span class="br0">&#123;</span> foldNondetT <span class="sy0">::</span> <span class="br0">&#40;</span><span class="kw1">forall</span> b<span class="sy0">.</span> <span class="br0">&#40;</span>a <span class="sy0">-&gt;</span> m b <span class="sy0">-&gt;</span> m b<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> m b <span class="sy0">-&gt;</span> m b<span class="br0">&#41;</span> <span class="br0">&#125;</span>
&#160;
runNondetT <span class="sy0">::</span> <span class="br0">&#40;</span><span class="kw4">Monad</span> m<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> NondetT m a <span class="sy0">-&gt;</span> m a
runNondetT m <span class="sy0">=</span> foldNondetT m <span class="br0">&#40;</span>\x xs <span class="sy0">-&gt;</span> <span class="kw3">return</span> x<span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw3">error</span> <span class="st0">&quot;No solution found.&quot;</span><span class="br0">&#41;</span>
&#160;
<span class="kw1">instance</span> <span class="br0">&#40;</span><span class="kw4">Functor</span> m<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="kw4">Functor</span> <span class="br0">&#40;</span>NondetT m<span class="br0">&#41;</span> <span class="kw1">where</span>
  <span class="kw3">fmap</span> f <span class="br0">&#40;</span>NondetT g<span class="br0">&#41;</span> <span class="sy0">=</span> NondetT <span class="br0">&#40;</span>\cons nil <span class="sy0">-&gt;</span> g <span class="br0">&#40;</span>cons <span class="sy0">.</span> f<span class="br0">&#41;</span> nil<span class="br0">&#41;</span>
&#160;
<span class="kw1">instance</span> <span class="br0">&#40;</span><span class="kw4">Monad</span> m<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="kw4">Monad</span> <span class="br0">&#40;</span>NondetT m<span class="br0">&#41;</span> <span class="kw1">where</span>
  <span class="kw3">return</span> a <span class="sy0">=</span> NondetT <span class="br0">&#40;</span>\cons nil <span class="sy0">-&gt;</span> cons a nil<span class="br0">&#41;</span>
  m <span class="sy0">&gt;&gt;=</span> k  <span class="sy0">=</span> NondetT <span class="br0">&#40;</span>\cons nil <span class="sy0">-&gt;</span> foldNondetT m <span class="br0">&#40;</span>\x <span class="sy0">-&gt;</span> foldNondetT <span class="br0">&#40;</span>k x<span class="br0">&#41;</span> cons<span class="br0">&#41;</span> nil<span class="br0">&#41;</span>
&#160;
<span class="kw1">instance</span> <span class="br0">&#40;</span><span class="kw4">Monad</span> m<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> MonadPlus <span class="br0">&#40;</span>NondetT m<span class="br0">&#41;</span> <span class="kw1">where</span>
  mzero         <span class="sy0">=</span> NondetT <span class="br0">&#40;</span>\cons nil <span class="sy0">-&gt;</span> nil<span class="br0">&#41;</span>
  m1 `mplus` m2 <span class="sy0">=</span> NondetT <span class="br0">&#40;</span>\cons <span class="sy0">-&gt;</span> foldNondetT m1 cons <span class="sy0">.</span> foldNondetT m2 cons<span class="br0">&#41;</span>
&#160;
<span class="kw1">instance</span> MonadTrans NondetT <span class="kw1">where</span>
  lift m <span class="sy0">=</span> NondetT <span class="br0">&#40;</span>\cons nil <span class="sy0">-&gt;</span> m <span class="sy0">&gt;&gt;=</span> \a <span class="sy0">-&gt;</span> cons a nil<span class="br0">&#41;</span>
&#160;
<span class="kw1">newtype</span> Nondet a <span class="sy0">=</span> Nondet <span class="br0">&#40;</span>NondetT Identity a<span class="br0">&#41;</span> <span class="kw1">deriving</span> <span class="br0">&#40;</span><span class="kw4">Functor</span><span class="sy0">,</span> <span class="kw4">Monad</span><span class="sy0">,</span> MonadPlus<span class="br0">&#41;</span>
runNondet <span class="br0">&#40;</span>Nondet x<span class="br0">&#41;</span> <span class="sy0">=</span> runIdentity <span class="br0">&#40;</span>runNondetT x<span class="br0">&#41;</span>
&#160;
foldNondet <span class="sy0">::</span> Nondet a <span class="sy0">-&gt;</span> <span class="br0">&#40;</span>a <span class="sy0">-&gt;</span> b <span class="sy0">-&gt;</span> b<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> b <span class="sy0">-&gt;</span> b
foldNondet <span class="br0">&#40;</span>Nondet nd<span class="br0">&#41;</span> cons nil <span class="sy0">=</span>
   runIdentity <span class="sy0">$</span> foldNondetT nd <span class="br0">&#40;</span>\x xs <span class="sy0">-&gt;</span> <span class="kw3">return</span> <span class="br0">&#40;</span>cons x <span class="br0">&#40;</span>runIdentity xs<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw3">return</span> nil<span class="br0">&#41;</span>
&#160;
option <span class="sy0">::</span> <span class="br0">&#40;</span>MonadPlus m<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> m a
option <span class="sy0">=</span> msum <span class="sy0">.</span> <span class="kw3">map</span> <span class="kw3">return</span></pre></div></div>
<p><br />
</p><p><br />
</p>
<h2> <span class="mw-headline" id="Simple_solver">2  Simple solver </span></h2>
<p>By AlsonKemp.  This solver is probably similar to Cale's but I don't grok the non-deterministic monad...
</p><p>Note: this solver is exhaustive and will output all of the solutions, not just the first one.  In order to make it non-exhaustive, add a case statement to solve' in order to check "r" and branch on the result.
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="kw1">import</span> System
<span class="kw1">import</span> Control<span class="sy0">.</span><span class="kw4">Monad</span>
<span class="kw1">import</span> Data<span class="sy0">.</span>List
<span class="kw1">import</span> Data<span class="sy0">.</span>Array<span class="sy0">.</span><span class="kw4">IO</span>
&#160;
<span class="kw1">type</span> SodokuBoard <span class="sy0">=</span> IOArray <span class="kw4">Int</span> <span class="kw4">Int</span>
&#160;
main <span class="sy0">=</span> <span class="kw1">do</span>
    <span class="br0">&#91;</span>f<span class="br0">&#93;</span> <span class="sy0">&lt;-</span> getArgs
    a <span class="sy0">&lt;-</span> newArray <span class="br0">&#40;</span>1<span class="sy0">,</span> 81<span class="br0">&#41;</span> 0
    <span class="kw3">readFile</span> f <span class="sy0">&gt;&gt;=</span> readSodokuBoard a
    <span class="kw3">putStrLn</span> <span class="st0">&quot;Original:&quot;</span>
    printSodokuBoard a
    <span class="kw3">putStrLn</span> <span class="st0">&quot;Solutions:&quot;</span>
    solve a <span class="br0">&#40;</span>1<span class="sy0">,</span>1<span class="br0">&#41;</span>
&#160;
readSodokuBoard a xs <span class="sy0">=</span> <span class="kw3">sequence_</span> <span class="sy0">$</span> <span class="kw1">do</span> <span class="br0">&#40;</span>i<span class="sy0">,</span>ys<span class="br0">&#41;</span> <span class="sy0">&lt;-</span> <span class="kw3">zip</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span> <span class="br0">&#40;</span><span class="kw3">lines</span> xs<span class="br0">&#41;</span>
                                      <span class="br0">&#40;</span>j<span class="sy0">,</span>n<span class="br0">&#41;</span>  <span class="sy0">&lt;-</span> <span class="kw3">zip</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span> <span class="br0">&#40;</span><span class="kw3">words</span> ys<span class="br0">&#41;</span>
                                      <span class="kw3">return</span> <span class="sy0">$</span> writeBoard a <span class="br0">&#40;</span>j<span class="sy0">,</span>i<span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw3">read</span> n<span class="br0">&#41;</span>
&#160;
printSodokuBoard a <span class="sy0">=</span>
   <span class="kw1">let</span> printLine a y <span class="sy0">=</span>
     <span class="kw3">mapM</span> <span class="br0">&#40;</span>\x <span class="sy0">-&gt;</span> readBoard a <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span> <span class="sy0">&gt;&gt;=</span> <span class="kw3">mapM_</span> <span class="br0">&#40;</span><span class="kw3">putStr</span> <span class="sy0">.</span> <span class="kw3">show</span><span class="br0">&#41;</span> <span class="kw1">in</span> <span class="kw1">do</span>
                     <span class="kw3">putStrLn</span> <span class="st0">&quot;-----------&quot;</span>
                     <span class="kw3">mapM_</span> <span class="br0">&#40;</span>\y <span class="sy0">-&gt;</span> <span class="kw3">putStr</span> <span class="st0">&quot;|&quot;</span> <span class="sy0">&gt;&gt;</span> printLine a y <span class="sy0">&gt;&gt;</span> <span class="kw3">putStrLn</span> <span class="st0">&quot;|&quot;</span><span class="br0">&#41;</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span>
                     <span class="kw3">putStrLn</span> <span class="st0">&quot;-----------&quot;</span>
&#160;
<span class="co1">-- the meat of the program.  Checks the current square.</span>
<span class="co1">-- If 0, then get the list of nums and try to &quot;solve' &quot;</span>
<span class="co1">-- Otherwise, go to the next square.</span>
solve <span class="sy0">::</span> SodokuBoard  <span class="sy0">-&gt;</span> <span class="br0">&#40;</span><span class="kw4">Int</span><span class="sy0">,</span> <span class="kw4">Int</span><span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="kw4">IO</span> <span class="br0">&#40;</span><span class="kw4">Maybe</span> SodokuBoard<span class="br0">&#41;</span>
solve a <span class="br0">&#40;</span>10<span class="sy0">,</span>y<span class="br0">&#41;</span> <span class="sy0">=</span> solve a <span class="br0">&#40;</span>1<span class="sy0">,</span>y<span class="sy0">+</span>1<span class="br0">&#41;</span>
solve a <span class="br0">&#40;</span><span class="sy0">_,</span> 10<span class="br0">&#41;</span><span class="sy0">=</span> printSodokuBoard a <span class="sy0">&gt;&gt;</span> <span class="kw3">return</span> <span class="br0">&#40;</span>Just a<span class="br0">&#41;</span>
solve a <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span>  <span class="sy0">=</span> <span class="kw1">do</span> v <span class="sy0">&lt;-</span> readBoard a <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span>
                    <span class="kw1">case</span> v <span class="kw1">of</span>
                      <span class="nu0">0</span> <span class="sy0">-&gt;</span> availableNums a <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span> <span class="sy0">&gt;&gt;=</span> solve' a <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span>
                      <span class="sy0">_</span> <span class="sy0">-&gt;</span>  solve a <span class="br0">&#40;</span>x<span class="sy0">+</span><span class="nu0">1</span><span class="sy0">,</span>y<span class="br0">&#41;</span>
     <span class="co1">-- solve' handles the backtacking</span>
  <span class="kw1">where</span> solve' a <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>     <span class="sy0">=</span> <span class="kw3">return</span> Nothing
        solve' a <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span> <span class="br0">&#40;</span>v:vs<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw1">do</span> writeBoard a <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span> v   <span class="co1">-- put a guess onto the board</span>
                                   r <span class="sy0">&lt;-</span> solve a <span class="br0">&#40;</span>x<span class="sy0">+</span><span class="nu0">1</span><span class="sy0">,</span>y<span class="br0">&#41;</span>
                                   writeBoard a <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span> <span class="nu0">0</span>   <span class="co1">-- remove the guess from the board</span>
                                   solve' a <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span> vs      <span class="co1">-- recurse over the remainder of the list</span>
&#160;
<span class="co1">-- get the &quot;taken&quot; numbers from a row, col or box.</span>
getRowNums a y <span class="sy0">=</span> <span class="kw3">sequence</span> <span class="br0">&#91;</span>readBoard a <span class="br0">&#40;</span>x'<span class="sy0">,</span>y<span class="br0">&#41;</span> <span class="sy0">|</span> x' <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="br0">&#93;</span>
getColNums a x <span class="sy0">=</span> <span class="kw3">sequence</span> <span class="br0">&#91;</span>readBoard a <span class="br0">&#40;</span>x<span class="sy0">,</span>y'<span class="br0">&#41;</span> <span class="sy0">|</span> y' <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="br0">&#93;</span>
getBoxNums a <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw3">sequence</span> <span class="br0">&#91;</span>readBoard a <span class="br0">&#40;</span>x'<span class="sy0">+</span>u<span class="sy0">,</span> y'<span class="sy0">+</span>v<span class="br0">&#41;</span> <span class="sy0">|</span> u <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>0<span class="sy0">..</span>2<span class="br0">&#93;</span><span class="sy0">,</span> v <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>0<span class="sy0">..</span>2<span class="br0">&#93;</span><span class="br0">&#93;</span> 
  <span class="kw1">where</span> x' <span class="sy0">=</span> <span class="br0">&#40;</span>3 <span class="sy0">*</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>x<span class="sy0">-</span>1<span class="br0">&#41;</span> `<span class="kw3">quot</span>` 3<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> 1
        y' <span class="sy0">=</span> <span class="br0">&#40;</span>3 <span class="sy0">*</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>y<span class="sy0">-</span>1<span class="br0">&#41;</span> `<span class="kw3">quot</span>` <span class="nu0">3</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">1</span>
&#160;
<span class="co1">-- return the numbers that are available for a particular square</span>
availableNums a <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw1">do</span> r <span class="sy0">&lt;-</span> getRowNums a y 
                           c <span class="sy0">&lt;-</span> getColNums a x
                           b <span class="sy0">&lt;-</span> getBoxNums a <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span>
                           <span class="kw3">return</span> <span class="sy0">$</span> <span class="br0">&#91;</span>0<span class="sy0">..</span>9<span class="br0">&#93;</span> \\ <span class="br0">&#40;</span>r `union` c `union` b<span class="br0">&#41;</span>  
&#160;
<span class="co1">-- aliases of read and write array that flatten the index</span>
readBoard a <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span> <span class="sy0">=</span> readArray a <span class="br0">&#40;</span>x<span class="sy0">+</span><span class="nu0">9</span><span class="sy0">*</span><span class="br0">&#40;</span>y<span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
writeBoard a <span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span> e <span class="sy0">=</span> writeArray a <span class="br0">&#40;</span>x<span class="sy0">+</span><span class="nu0">9</span><span class="sy0">*</span><span class="br0">&#40;</span>y<span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span> e</pre></div></div>
<h2> <span class="mw-headline" id="Complete_decision_tree">3  Complete decision tree </span></h2>
<p>By Henning Thielemann.
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="kw1">module</span> Sudoku <span class="kw1">where</span>
&#160;
<span class="coMULTI">{-
  This is inspired by John Hughes &quot;Why Functional Programming Matters&quot;.
  We build a complete decision tree.
  That is, all alternatives in a certain depth
  have the same number of determined values.
  At the bottom of the tree all possible solutions can be found.
  Actually the algorithm is very stupid:
  In each depth we look for the field with the least admissible choices of numbers
  and prune the alternative branches for the other fields.
-}</span>
&#160;
<span class="kw1">import</span> Data<span class="sy0">.</span><span class="kw4">Char</span> <span class="br0">&#40;</span>ord<span class="sy0">,</span> chr<span class="sy0">,</span> isDigit<span class="sy0">,</span> digitToInt<span class="sy0">,</span> intToDigit<span class="br0">&#41;</span>
<span class="kw1">import</span> Data<span class="sy0">.</span>Array <span class="br0">&#40;</span>Array<span class="sy0">,</span> range<span class="sy0">,</span> <span class="br0">&#40;</span><span class="sy0">!</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="br0">&#40;</span><span class="sy0">//</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">import</span> Data<span class="sy0">.</span>Tree <span class="br0">&#40;</span>Tree<span class="br0">&#41;</span>
<span class="kw1">import</span> <span class="kw1">qualified</span> Data<span class="sy0">.</span>Tree <span class="kw1">as</span> Tree
<span class="kw1">import</span> Data<span class="sy0">.</span>List <span class="br0">&#40;</span>sort<span class="sy0">,</span> minimumBy<span class="br0">&#41;</span>
<span class="kw1">import</span> Data<span class="sy0">.</span><span class="kw4">Maybe</span> <span class="br0">&#40;</span>catMaybes<span class="sy0">,</span> isNothing<span class="sy0">,</span> fromMaybe<span class="sy0">,</span> fromJust<span class="br0">&#41;</span>
<span class="kw1">import</span> <span class="kw1">qualified</span> Data<span class="sy0">.</span>Array <span class="kw1">as</span> Array
&#160;
<span class="coMULTI">{-
Example:
&#160;
ghci -Wall Sudoku.hs
&#160;
*Sudoku&gt; mapM_ putCLn (solutions exampleHawiki0)
-}</span>
&#160;
&#160;
<span class="coMULTI">{- [[ATree]] contains a list of possible alternatives for each position -}</span>
<span class="kw1">data</span> ATree a <span class="sy0">=</span> ANode T <span class="br0">&#91;</span><span class="br0">&#91;</span>ATree a<span class="br0">&#93;</span><span class="br0">&#93;</span>
&#160;
<span class="kw1">type</span> Coord   <span class="sy0">=</span> <span class="kw4">Int</span>
<span class="kw1">type</span> Address <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">Int</span><span class="sy0">,</span><span class="kw4">Int</span><span class="sy0">,</span><span class="kw4">Int</span><span class="sy0">,</span><span class="kw4">Int</span><span class="br0">&#41;</span>
<span class="kw1">type</span> Element <span class="sy0">=</span> <span class="kw4">Int</span>
&#160;
<span class="kw1">type</span> T        <span class="sy0">=</span> Array Address <span class="br0">&#40;</span><span class="kw4">Maybe</span> Element<span class="br0">&#41;</span>
<span class="kw1">type</span> Complete <span class="sy0">=</span> Array Address Element
&#160;
fieldBounds <span class="sy0">::</span> <span class="br0">&#40;</span>Address<span class="sy0">,</span> Address<span class="br0">&#41;</span>
fieldBounds <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="br0">&#40;</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&#160;
squareRange <span class="sy0">::</span> <span class="br0">&#91;</span><span class="br0">&#40;</span>Coord<span class="sy0">,</span> Coord<span class="br0">&#41;</span><span class="br0">&#93;</span>
squareRange <span class="sy0">=</span> range <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="br0">&#40;</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&#160;
alphabet <span class="sy0">::</span> <span class="br0">&#91;</span>Element<span class="br0">&#93;</span>
alphabet <span class="sy0">=</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span>
&#160;
&#160;
&#160;
<span class="coMULTI">{- * solution -}</span>
&#160;
<span class="coMULTI">{-
  Given two sorted lists,
  remove the elements of the first list from the second one.
-}</span>
deleteSorted <span class="sy0">::</span> <span class="kw4">Ord</span> a <span class="sy0">=&gt;</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span>
deleteSorted <span class="br0">&#91;</span><span class="br0">&#93;</span> ys <span class="sy0">=</span> ys
deleteSorted <span class="sy0">_</span>  <span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
deleteSorted <span class="br0">&#40;</span>x:xs<span class="br0">&#41;</span> <span class="br0">&#40;</span>y:ys<span class="br0">&#41;</span> <span class="sy0">=</span>
   <span class="kw1">case</span> <span class="kw3">compare</span> x y <span class="kw1">of</span>
      EQ <span class="sy0">-&gt;</span> deleteSorted xs ys
      LT <span class="sy0">-&gt;</span> deleteSorted xs <span class="br0">&#40;</span>y:ys<span class="br0">&#41;</span>
      GT <span class="sy0">-&gt;</span> y&#160;: deleteSorted <span class="br0">&#40;</span>x:xs<span class="br0">&#41;</span> ys
&#160;
admissibleNumbers <span class="sy0">::</span> <span class="br0">&#91;</span><span class="br0">&#91;</span><span class="kw4">Maybe</span> Element<span class="br0">&#93;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>Element<span class="br0">&#93;</span>
admissibleNumbers <span class="sy0">=</span>
   <span class="kw3">foldl</span> <span class="br0">&#40;</span><span class="kw3">flip</span> deleteSorted<span class="br0">&#41;</span> alphabet <span class="sy0">.</span>
   <span class="kw3">map</span> <span class="br0">&#40;</span>sort <span class="sy0">.</span> catMaybes<span class="br0">&#41;</span>
&#160;
admissibleAdditions <span class="sy0">::</span> T <span class="sy0">-&gt;</span> Address <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>Element<span class="br0">&#93;</span>
admissibleAdditions sudoku <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="sy0">,</span>k<span class="sy0">,</span>l<span class="br0">&#41;</span> <span class="sy0">=</span>
   admissibleNumbers <span class="br0">&#40;</span><span class="kw3">map</span> <span class="br0">&#40;</span><span class="sy0">$</span> sudoku<span class="br0">&#41;</span>
      <span class="br0">&#91;</span>selectRow    <span class="br0">&#40;</span>i<span class="sy0">,</span>k<span class="br0">&#41;</span><span class="sy0">,</span>
       selectColumn <span class="br0">&#40;</span>j<span class="sy0">,</span>l<span class="br0">&#41;</span><span class="sy0">,</span>
       selectSquare <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
&#160;
allAdmissibleAdditions <span class="sy0">::</span> T <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="br0">&#40;</span>Address<span class="sy0">,</span> <span class="br0">&#91;</span>Element<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
allAdmissibleAdditions sudoku <span class="sy0">=</span>
   <span class="kw1">let</span> adds addr <span class="sy0">=</span>
          <span class="br0">&#40;</span>addr<span class="sy0">,</span> admissibleAdditions sudoku addr<span class="br0">&#41;</span>
   <span class="kw1">in</span>  <span class="kw3">map</span> adds
           <span class="br0">&#40;</span><span class="kw3">map</span> <span class="kw3">fst</span> <span class="br0">&#40;</span><span class="kw3">filter</span> <span class="br0">&#40;</span>isNothing <span class="sy0">.</span> <span class="kw3">snd</span><span class="br0">&#41;</span>
                            <span class="br0">&#40;</span>Array<span class="sy0">.</span>assocs sudoku<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&#160;
&#160;
&#160;
solutionTree <span class="sy0">::</span> T <span class="sy0">-&gt;</span> ATree T
solutionTree sudoku <span class="sy0">=</span>
   <span class="kw1">let</span> new <span class="br0">&#40;</span>addr<span class="sy0">,</span>elms<span class="br0">&#41;</span> <span class="sy0">=</span>
          <span class="kw3">map</span> <span class="br0">&#40;</span>\elm <span class="sy0">-&gt;</span> solutionTree <span class="br0">&#40;</span>sudoku <span class="sy0">//</span> <span class="br0">&#91;</span><span class="br0">&#40;</span>addr<span class="sy0">,</span> Just elm<span class="br0">&#41;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> elms
   <span class="kw1">in</span>  ANode sudoku <span class="br0">&#40;</span><span class="kw3">map</span> new <span class="br0">&#40;</span>allAdmissibleAdditions sudoku<span class="br0">&#41;</span><span class="br0">&#41;</span>
&#160;
treeAltToStandard <span class="sy0">::</span> ATree T <span class="sy0">-&gt;</span> Tree T
treeAltToStandard <span class="br0">&#40;</span>ANode sudoku subs<span class="br0">&#41;</span> <span class="sy0">=</span>
   Tree<span class="sy0">.</span>Node sudoku <span class="br0">&#40;</span><span class="kw3">concatMap</span> <span class="br0">&#40;</span><span class="kw3">map</span> treeAltToStandard<span class="br0">&#41;</span> subs<span class="br0">&#41;</span>
&#160;
<span class="coMULTI">{- Convert a tree with alternatives for each position (ATree)
   into a normal tree by choosing one position and its alternative values.
   We need to consider only one position per level
   because the remaining positions are processed in the sub-levels.
   With other words: Choosing more than one position
   would lead to multiple reports of the same solution.
&#160;
   For reasons of efficiency
   we choose the position with the least number of alternatives.
   If this number is zero, the numbers tried so far are wrong.
   If this number is one, then the choice is unique, but maybe still wrong.
   If the number of alternatives is larger,
   we have to check each alternative.
-}</span>
treeAltToStandardOptimize <span class="sy0">::</span> ATree T <span class="sy0">-&gt;</span> Tree T
treeAltToStandardOptimize <span class="br0">&#40;</span>ANode sudoku subs<span class="br0">&#41;</span> <span class="sy0">=</span>
   <span class="kw1">let</span> chooseMinLen <span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
       chooseMinLen xs <span class="sy0">=</span> minimumBy compareLength xs
   <span class="kw1">in</span>  Tree<span class="sy0">.</span>Node sudoku <span class="br0">&#40;</span>chooseMinLen
          <span class="br0">&#40;</span><span class="kw3">map</span> <span class="br0">&#40;</span><span class="kw3">map</span> treeAltToStandardOptimize<span class="br0">&#41;</span> subs<span class="br0">&#41;</span><span class="br0">&#41;</span>
&#160;
maybeComplete <span class="sy0">::</span> T <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> Complete
maybeComplete sudoku <span class="sy0">=</span>
   <span class="kw3">fmap</span> <span class="br0">&#40;</span>Array<span class="sy0">.</span>array fieldBounds<span class="br0">&#41;</span>
        <span class="br0">&#40;</span><span class="kw3">mapM</span> <span class="br0">&#40;</span><span class="kw3">uncurry</span> <span class="br0">&#40;</span><span class="kw3">fmap</span> <span class="sy0">.</span> <span class="br0">&#40;</span><span class="sy0">,</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>Array<span class="sy0">.</span>assocs sudoku<span class="br0">&#41;</span><span class="br0">&#41;</span>
&#160;
<span class="coMULTI">{- All leafs are at the same depth,
   namely the number of undetermined fields.
   That's why we can safely select all Sudokus at the lowest level. -}</span>
solutions <span class="sy0">::</span> T <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>Complete<span class="br0">&#93;</span>
solutions sudoku <span class="sy0">=</span>
   <span class="kw1">let</span> err <span class="sy0">=</span> <span class="kw3">error</span> <span class="st0">&quot;The lowest level should contain complete Sudokus only.&quot;</span>
       <span class="coMULTI">{- &quot;last'&quot; is more efficient than &quot;last&quot; here
          because the program does not have to check
          whether deeper levels exist.
          We know that the tree is as deep
          as the number of undefined fields.
          This means that dropMatch returns a singleton list.
          We don't check that
          because then we would lose the efficiency again. -}</span>
       <span class="kw3">last</span>' <span class="sy0">=</span> <span class="kw3">head</span> <span class="sy0">.</span> dropMatch <span class="br0">&#40;</span><span class="kw3">filter</span> isNothing <span class="br0">&#40;</span>Array<span class="sy0">.</span>elems sudoku<span class="br0">&#41;</span><span class="br0">&#41;</span>
   <span class="kw1">in</span>  <span class="kw3">map</span> <span class="br0">&#40;</span>fromMaybe err <span class="sy0">.</span> maybeComplete<span class="br0">&#41;</span>
           <span class="br0">&#40;</span><span class="kw3">last</span>' <span class="br0">&#40;</span>Tree<span class="sy0">.</span>levels
             <span class="br0">&#40;</span>treeAltToStandardOptimize <span class="br0">&#40;</span>solutionTree sudoku<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&#160;
&#160;
&#160;
<span class="coMULTI">{- * transformations (can be used for construction, too) -}</span>
&#160;
standard <span class="sy0">::</span> Complete
standard <span class="sy0">=</span>
   Array<span class="sy0">.</span>listArray fieldBounds
      <span class="br0">&#40;</span><span class="kw3">map</span> <span class="br0">&#40;</span>\<span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="sy0">,</span>k<span class="sy0">,</span>l<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="kw3">mod</span> <span class="br0">&#40;</span>j<span class="sy0">+</span>k<span class="br0">&#41;</span> 3 <span class="sy0">*</span> 3 <span class="sy0">+</span> <span class="kw3">mod</span> <span class="br0">&#40;</span>i<span class="sy0">+</span>l<span class="br0">&#41;</span> 3 <span class="sy0">+</span> 1<span class="br0">&#41;</span>
           <span class="br0">&#40;</span>range fieldBounds<span class="br0">&#41;</span><span class="br0">&#41;</span>
&#160;
&#160;
exampleHawiki0<span class="sy0">,</span> exampleHawiki1 <span class="sy0">::</span> T
exampleHawiki0 <span class="sy0">=</span> fromString <span class="br0">&#40;</span><span class="kw3">unlines</span> <span class="br0">&#91;</span>
      <span class="st0">&quot; 5  6   1&quot;</span><span class="sy0">,</span>
      <span class="st0">&quot;  48   7 &quot;</span><span class="sy0">,</span>
      <span class="st0">&quot;8      52&quot;</span><span class="sy0">,</span>
      <span class="st0">&quot;2   57 3 &quot;</span><span class="sy0">,</span>
      <span class="st0">&quot;         &quot;</span><span class="sy0">,</span>
      <span class="st0">&quot; 3 69   5&quot;</span><span class="sy0">,</span>
      <span class="st0">&quot;79      8&quot;</span><span class="sy0">,</span>
      <span class="st0">&quot; 1   65  &quot;</span><span class="sy0">,</span>
      <span class="st0">&quot;5   3  6 &quot;</span>
   <span class="br0">&#93;</span><span class="br0">&#41;</span>
&#160;
exampleHawiki1 <span class="sy0">=</span> fromString <span class="br0">&#40;</span><span class="kw3">unlines</span> <span class="br0">&#91;</span>
      <span class="st0">&quot;    6  8 &quot;</span><span class="sy0">,</span>
      <span class="st0">&quot; 2       &quot;</span><span class="sy0">,</span>
      <span class="st0">&quot;  1      &quot;</span><span class="sy0">,</span>
      <span class="st0">&quot; 7    1 2&quot;</span><span class="sy0">,</span>
      <span class="st0">&quot;5   3    &quot;</span><span class="sy0">,</span>
      <span class="st0">&quot;      4  &quot;</span><span class="sy0">,</span>
      <span class="st0">&quot;  42 1   &quot;</span><span class="sy0">,</span>
      <span class="st0">&quot;3  7  6  &quot;</span><span class="sy0">,</span>
      <span class="st0">&quot;       5 &quot;</span>
   <span class="br0">&#93;</span><span class="br0">&#41;</span>
&#160;
&#160;
&#160;
&#160;
check <span class="sy0">::</span> Complete <span class="sy0">-&gt;</span> <span class="kw4">Bool</span>
check sudoku <span class="sy0">=</span>
   <span class="kw1">let</span> checkParts select <span class="sy0">=</span>
          <span class="kw3">all</span> <span class="br0">&#40;</span>\addr <span class="sy0">-&gt;</span> sort <span class="br0">&#40;</span>select addr sudoku<span class="br0">&#41;</span> <span class="sy0">==</span> alphabet<span class="br0">&#41;</span> squareRange
   <span class="kw1">in</span>  <span class="kw3">all</span> checkParts <span class="br0">&#91;</span>selectRow<span class="sy0">,</span> selectColumn<span class="sy0">,</span> selectSquare<span class="br0">&#93;</span>
&#160;
selectRow<span class="sy0">,</span> selectColumn<span class="sy0">,</span> selectSquare <span class="sy0">::</span>
   <span class="br0">&#40;</span>Coord<span class="sy0">,</span>Coord<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> Array Address element <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>element<span class="br0">&#93;</span>
selectRow <span class="br0">&#40;</span>i<span class="sy0">,</span>k<span class="br0">&#41;</span> sudoku <span class="sy0">=</span>
   <span class="kw3">map</span> <span class="br0">&#40;</span>sudoku<span class="sy0">!</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>range <span class="br0">&#40;</span><span class="br0">&#40;</span>i<span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span>k<span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="br0">&#40;</span>i<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span>k<span class="sy0">,</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="co1">--   map (sudoku!) (map (\(j,l) -&gt; (i,j,k,l)) squareRange)</span>
selectColumn <span class="br0">&#40;</span>j<span class="sy0">,</span>l<span class="br0">&#41;</span> sudoku <span class="sy0">=</span>
   <span class="kw3">map</span> <span class="br0">&#40;</span>sudoku<span class="sy0">!</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>range <span class="br0">&#40;</span><span class="br0">&#40;</span>0<span class="sy0">,</span>j<span class="sy0">,</span>0<span class="sy0">,</span>l<span class="br0">&#41;</span><span class="sy0">,</span> <span class="br0">&#40;</span>2<span class="sy0">,</span>j<span class="sy0">,</span>2<span class="sy0">,</span>l<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
selectSquare <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span> sudoku <span class="sy0">=</span>
   <span class="kw3">map</span> <span class="br0">&#40;</span>sudoku<span class="sy0">!</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>range <span class="br0">&#40;</span><span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&#160;
&#160;
<span class="coMULTI">{- * conversion from and to strings -}</span>
&#160;
put<span class="sy0">,</span> putLn <span class="sy0">::</span> T <span class="sy0">-&gt;</span> <span class="kw4">IO</span> <span class="br0">&#40;</span><span class="br0">&#41;</span>
put   sudoku <span class="sy0">=</span> <span class="kw3">putStr</span>   <span class="br0">&#40;</span>toString sudoku<span class="br0">&#41;</span>
putLn sudoku <span class="sy0">=</span> <span class="kw3">putStrLn</span> <span class="br0">&#40;</span>toString sudoku<span class="br0">&#41;</span>
&#160;
putC<span class="sy0">,</span> putCLn <span class="sy0">::</span> Complete <span class="sy0">-&gt;</span> <span class="kw4">IO</span> <span class="br0">&#40;</span><span class="br0">&#41;</span>
putC   sudoku <span class="sy0">=</span> <span class="kw3">putStr</span>   <span class="br0">&#40;</span>toString <span class="br0">&#40;</span><span class="kw3">fmap</span> Just sudoku<span class="br0">&#41;</span><span class="br0">&#41;</span>
putCLn sudoku <span class="sy0">=</span> <span class="kw3">putStrLn</span> <span class="br0">&#40;</span>toString <span class="br0">&#40;</span><span class="kw3">fmap</span> Just sudoku<span class="br0">&#41;</span><span class="br0">&#41;</span>
&#160;
fromString <span class="sy0">::</span> <span class="kw4">String</span> <span class="sy0">-&gt;</span> T
fromString str <span class="sy0">=</span>
   Array<span class="sy0">.</span>array fieldBounds <span class="br0">&#40;</span><span class="kw3">concat</span>
      <span class="br0">&#40;</span><span class="kw3">zipWith</span> <span class="br0">&#40;</span>\<span class="br0">&#40;</span>i<span class="sy0">,</span>k<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="kw3">map</span> <span class="br0">&#40;</span>\<span class="br0">&#40;</span><span class="br0">&#40;</span>j<span class="sy0">,</span>l<span class="br0">&#41;</span><span class="sy0">,</span>x<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="sy0">,</span>k<span class="sy0">,</span>l<span class="br0">&#41;</span><span class="sy0">,</span>x<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
         squareRange
         <span class="br0">&#40;</span><span class="kw3">map</span> <span class="br0">&#40;</span><span class="kw3">zip</span> squareRange <span class="sy0">.</span> <span class="kw3">map</span> charToElem<span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw3">lines</span> str<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&#160;
toString <span class="sy0">::</span> T <span class="sy0">-&gt;</span> <span class="kw4">String</span>
toString sudoku <span class="sy0">=</span>
   <span class="kw3">unlines</span>
      <span class="br0">&#40;</span><span class="kw3">map</span> <span class="br0">&#40;</span>\<span class="br0">&#40;</span>i<span class="sy0">,</span>k<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="kw3">map</span> <span class="br0">&#40;</span>\<span class="br0">&#40;</span>j<span class="sy0">,</span>l<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> elemToChar <span class="br0">&#40;</span>sudoku<span class="sy0">!</span><span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="sy0">,</span>k<span class="sy0">,</span>l<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
                          squareRange<span class="br0">&#41;</span>
           squareRange<span class="br0">&#41;</span>
&#160;
charToElem <span class="sy0">::</span> <span class="kw4">Char</span> <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> Element
charToElem c <span class="sy0">=</span>
   toMaybe <span class="br0">&#40;</span>isDigit c<span class="br0">&#41;</span> <span class="br0">&#40;</span>digitToInt c<span class="br0">&#41;</span>
&#160;
elemToChar <span class="sy0">::</span> <span class="kw4">Maybe</span> Element <span class="sy0">-&gt;</span> <span class="kw4">Char</span>
elemToChar <span class="sy0">=</span>
   <span class="kw3">maybe</span> ' ' intToDigit
&#160;
&#160;
<span class="coMULTI">{- * helper functions -}</span>
&#160;
nest <span class="sy0">::</span> <span class="kw4">Int</span> <span class="sy0">-&gt;</span> <span class="br0">&#40;</span>a <span class="sy0">-&gt;</span> a<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> a <span class="sy0">-&gt;</span> a
nest 0 <span class="sy0">_</span> x <span class="sy0">=</span> x
nest n f x <span class="sy0">=</span> f <span class="br0">&#40;</span>nest <span class="br0">&#40;</span>n<span class="sy0">-</span>1<span class="br0">&#41;</span> f x<span class="br0">&#41;</span>
&#160;
toMaybe <span class="sy0">::</span> <span class="kw4">Bool</span> <span class="sy0">-&gt;</span> a <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> a
toMaybe False <span class="sy0">_</span> <span class="sy0">=</span> Nothing
toMaybe True  x <span class="sy0">=</span> Just x
&#160;
compareLength <span class="sy0">::</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>b<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="kw4">Ordering</span>
compareLength <span class="br0">&#40;</span><span class="sy0">_</span>:xs<span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="sy0">_</span>:ys<span class="br0">&#41;</span> <span class="sy0">=</span> compareLength xs ys
compareLength <span class="br0">&#91;</span><span class="br0">&#93;</span>     <span class="br0">&#91;</span><span class="br0">&#93;</span>     <span class="sy0">=</span> EQ
compareLength <span class="br0">&#40;</span><span class="sy0">_</span>:<span class="sy0">_</span><span class="br0">&#41;</span>  <span class="br0">&#91;</span><span class="br0">&#93;</span>     <span class="sy0">=</span> GT
compareLength <span class="br0">&#91;</span><span class="br0">&#93;</span>     <span class="br0">&#40;</span><span class="sy0">_</span>:<span class="sy0">_</span><span class="br0">&#41;</span>  <span class="sy0">=</span> LT
&#160;
<span class="coMULTI">{- | Drop as many elements as the first list is long -}</span>
dropMatch <span class="sy0">::</span> <span class="br0">&#91;</span>b<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span>
dropMatch xs ys <span class="sy0">=</span>
   <span class="kw3">map</span> fromJust <span class="br0">&#40;</span><span class="kw3">dropWhile</span> isNothing
      <span class="br0">&#40;</span><span class="kw3">zipWith</span> <span class="br0">&#40;</span>toMaybe <span class="sy0">.</span> <span class="kw3">null</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw3">iterate</span> <span class="br0">&#40;</span><span class="kw3">drop</span> <span class="nu0">1</span><span class="br0">&#41;</span> xs<span class="br0">&#41;</span> ys<span class="br0">&#41;</span><span class="br0">&#41;</span></pre></div></div>
<p><br />
</p>
<h2> <span class="mw-headline" id="Exact_set_cover_solver">4  Exact set cover solver </span></h2>
<p>By Henning Thielemann.
</p><p>As part of the package <a rel="nofollow" class="external text" href="http://hackage.haskell.org/package/set-cover">set-cover</a>
there are <a rel="nofollow" class="external text" href="http://code.haskell.org/~thielema/set-cover/example/Sudoku.hs">two short solutions</a> using a generic exact set cover solver.
</p>
One solution uses the <div class="inline-code"><div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;">Set</div></div></div> type from the <a rel="nofollow" class="external text" href="http://hackage.haskell.org/package/containers">containers</a> package whereas the other solution uses bit manipulation. Both solvers are pretty fast.
<h2> <span class="mw-headline" id="No_guessing">5  No guessing </span></h2>
<p>By Simon Peyton Jones.
</p><p>Since this page is here I thought I'd add a solver I wrote sometime last year.  The main constraint I imposed is that it never guesses, and that it outputs a human-comprehensible explanation of every step of its reasoning.  That means there are some puzzles it can't solve.  I'd be interested to know if there are any puzzles that it gets stuck on where there is a no-guessing way forward.  I made no attempt to make it fast.
</p><p>There are two files: <a href="/wikiupload/d/dd/SudokuPJ.hs" class="internal" title="SudokuPJ.hs">Media:SudokuPJ.hs</a> and <a href="/wikiupload/6/6f/TestPJ.hs" class="internal" title="TestPJ.hs">Media:TestPJ.hs</a>.  The latter just contains a bunch of test cases; I was too lazy to write a proper parser.
</p><p>The main entry point is:
</p>
<pre>
  run1&#160;:: Verbosity -&gt; [String] -&gt; Doc
  data Verbosity = All | Terse | Final
</pre>
<p>The <tt>[String]</tt> the starting board configuration (see the tests file).
</p>
<h2> <span class="mw-headline" id="Just_guessing">6  Just guessing </span></h2>
<p>By ChrisKuklewicz
</p><p>This solver is an implementation of Knuth's "Dancing Links" algorithm for solving binary-cover problems.  This algorithm represents the constraints as a sparse binary matrix, with 1's as linked nodes.  The nodes are in a vertical and a horizontal doubly linked list, and each vertical list is headed by another node that represents one of the constraints.  It is interesting as an example of the rare beast in Haskell: a mutable data structure.  The code has been rewritten and cleaned up here <a href="/wikiupload/d/d8/DancingSudoku.lhs" class="internal" title="DancingSudoku.lhs">Media:DancingSudoku.lhs</a>.  Its  main routine is designed to handle the input from <a rel="nofollow" class="external text" href="http://www.csse.uwa.edu.au/~gordon/sudoku17">sudoku17</a> on stdin.  Currently it only returns the first solution or calls an error, it can be modified (see comments in the file) to return all solutions in a list.  An earlier version used ST.Lazy instead of ST.Strict which made operating on puzzles with many solutions more tractable.
</p><p>Other trivia: It uses "mdo" and lazyness to initialize some of the doubly linked lists.
</p>
<h2> <span class="mw-headline" id="Very_smart.2C_with_only_a_little_guessing">7  Very smart, with only a little guessing </span></h2>
<p>by ChrisKuklewicz
</p><p>This solver does its best to avoid the branch and guess approach.  On the 36628 puzzles of  <a rel="nofollow" class="external text" href="http://www.csse.uwa.edu.au/~gordon/sudokumin.php">length 17</a> it resorts to guessing on only 164.  This extra strength comes from examining the constraints that can only be solved in exactly two ways, and how these constraints overlap and interact with each other and remaining possibilities.
</p><p>The <a rel="nofollow" class="external text" href="http://evenmere.org/~chrisk/chris-sudoku-deduce.tar.gz">source code</a> compiles to take a list of puzzles as input and produces a description of the number of (good and total) guesses required, as well as a shuffled version of the input.  If there was guessing, then the shuffled version could be sent back into the solver to see how the difficulty depended on luck.  The list of 164 hard puzzles is included with the source code.  The Deduce.hs file contains comments.
</p><p>The data is stored in a 9x9x9 boolean array, and the only operations are turning off possibilities and branching.  For performance the array is thawed, mutated, and frozen.  On the set of 36628 puzzles the speed averages 9.4 puzzles solved per second on a 1.33 GHz G4 (ghc-6.4.1 on OS X).  I liked the 9x9x9 array since it emphasized the symmetry of the problem.
</p>
<h2> <span class="mw-headline" id="Only_guessing_without_dancing_links">8  Only guessing without dancing links </span></h2>
<p>by AndrewBromage
</p><p><a rel="nofollow" class="external text" href="http://andrew.bromage.org/darcs/sudoku/">This solver</a> uses a different implementation of Knuth's algorithm, without using pointers.  It instead relies on the fact that in Haskell, tree-like data structure (in this case, a <a href="/haskellwiki/index.php?title=Priority_Search_Queue&amp;action=edit&amp;redlink=1" class="new" title="Priority Search Queue (page does not exist)">Priority Search Queue</a>) "undo" operations are essentially free.
</p>
<h2> <span class="mw-headline" id="Generalized_solver">9  Generalized solver </span></h2>
<p>By Thorkil Naur
</p><p>This Su Doku solver is able to solve classes of Su Doku puzzles that extend the ordinary 9*9 puzzles. The <a href="/haskellwiki/SuDokuThorkilNaurDocument" title="SuDokuThorkilNaurDocument" class="mw-redirect">documentation</a> describes the solver and also some (to the present author at least) surprising properties of various reduction strategies used when solving Su Doku puzzles.
</p><p>The following files comprise the Su Doku solver and related code:
</p>
<pre> <a href="/wikiupload/7/71/Format.hs" class="internal" title="Format.hs">Media:Format.hs</a>
 <a href="/wikiupload/a/a6/Merge.hs" class="internal" title="Merge.hs">Media:Merge.hs</a>
 <a href="/wikiupload/1/12/SdkMSol2.hs" class="internal" title="SdkMSol2.hs">Media:SdkMSol2.hs</a>
 <a href="/wikiupload/c/ca/SortByF.hs" class="internal" title="SortByF.hs">Media:SortByF.hs</a>
 <a href="/wikiupload/b/b9/SuDoku.hs" class="internal" title="SuDoku.hs">Media:SuDoku.hs</a>
 <a href="/wikiupload/2/27/T40.hs" class="internal" title="T40.hs">Media:t40.hs</a>
 <a href="/wikiupload/8/85/T44.hs" class="internal" title="T44.hs">Media:t44.hs</a>
 <a href="/wikiupload/c/c6/Test.hs" class="internal" title="Test.hs">Media:Test.hs</a>
</pre>
<p>For an example of use, the command
</p>
<pre>
runhugs SdkMSol2 \
  tn1 \
  Traditional 3 \
  -#123456789 \
  1-53---9- \
  ---6----- \
  ------271 \
  82------- \
  ---487--- \
  ------53- \
  23------- \
  --7-59--- \
  --6---8-4
</pre>
<p>produces output that, among other things, contain
</p>
<pre>
tn1: Solutions:
  1 7 5 3 2 8 4 9 6
  9 4 2 6 7 1 3 8 5
  3 6 8 5 9 4 2 7 1
  8 2 9 1 3 5 6 4 7
  6 5 3 4 8 7 9 1 2
  7 1 4 9 6 2 5 3 8
  2 3 1 8 4 6 7 5 9
  4 8 7 2 5 9 1 6 3
  5 9 6 7 1 3 8 2 4
</pre>
<h2> <span class="mw-headline" id="Simple_small_solver">10  Simple small solver </span></h2>
<p>I haven't looked at the other solvers in detail yet, so I'm not sure what is good or bad about mine, but here it is:
</p>
<pre> <a rel="nofollow" class="external free" href="http://darcs.brianweb.net/sudoku/Sudoku.pdf">http://darcs.brianweb.net/sudoku/Sudoku.pdf</a>
 <a rel="nofollow" class="external free" href="http://darcs.brianweb.net/sudoku/src/Sudoku.lhs">http://darcs.brianweb.net/sudoku/src/Sudoku.lhs</a>
</pre>
<p>-Brian Alliet &lt;brian@brianweb.net&gt;
</p>
<h2> <span class="mw-headline" id="Backtrack_monad_solver">11  Backtrack monad solver </span></h2>
<p>This is a simple but fast solver that uses standard
monads from the <a href="/haskellwiki/index.php?title=MonadTemplateLibrary&amp;action=edit&amp;redlink=1" class="new" title="MonadTemplateLibrary (page does not exist)">MonadTemplateLibrary</a> in the <a href="/haskellwiki/index.php?title=StandardLibraries&amp;action=edit&amp;redlink=1" class="new" title="StandardLibraries (page does not exist)">StandardLibraries</a>.
</p><p>Besides being Yet Another Example of a Sudoko solver,
I think it is also a nice somewhat-nontrivial example of
monads in practice.
</p><p>The idea is that the monad StateT s [] does backtracking.
It means "iterate over a list while keeping state,
but re-initialize to the original state on each iteration".
</p><p>I have several (Unix command line) front-ends to this
module, available upon request. The one I use most creates
and prints six new Sudoku puzzles on a page, with
fine-grain control over the difficulty of the puzzle.
This has made me quite popular among friends and
extended family.
</p>
<pre>- <a href="/haskellwiki/index.php?title=YitzGale&amp;action=edit&amp;redlink=1" class="new" title="YitzGale (page does not exist)">YitzGale</a>
</pre>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="coMULTI">{-# OPTIONS_GHC -fglasgow-exts #-}</span>
&#160;
<span class="co1">-- Solve a Sudoku puzzle</span>
&#160;
<span class="kw1">module</span> Sudoku <span class="kw1">where</span>
&#160;
<span class="kw1">import</span> Control<span class="sy0">.</span><span class="kw4">Monad</span><span class="sy0">.</span>State
<span class="kw1">import</span> Data<span class="sy0">.</span><span class="kw4">Maybe</span> <span class="br0">&#40;</span>maybeToList<span class="br0">&#41;</span>
<span class="kw1">import</span> Data<span class="sy0">.</span>List <span class="br0">&#40;</span>delete<span class="br0">&#41;</span>
&#160;
<span class="kw1">type</span> Value <span class="sy0">=</span> <span class="kw4">Int</span>
<span class="kw1">type</span> Cell <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">Int</span><span class="sy0">,</span> <span class="kw4">Int</span><span class="br0">&#41;</span> <span class="co1">-- One-based coordinates</span>
&#160;
<span class="kw1">type</span> Puzzle  <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#91;</span><span class="kw4">Maybe</span> Value<span class="br0">&#93;</span><span class="br0">&#93;</span>
<span class="kw1">type</span> Solution <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#91;</span>Value<span class="br0">&#93;</span><span class="br0">&#93;</span>
&#160;
<span class="co1">-- The size of the puzzle.</span>
sqrtSize <span class="sy0">::</span> <span class="kw4">Int</span>
sqrtSize <span class="sy0">=</span> <span class="nu0">3</span>
size <span class="sy0">=</span> sqrtSize <span class="sy0">*</span> sqrtSize
&#160;
<span class="co1">-- Besides the rows and columns, a Sudoku puzzle contains s blocks</span>
<span class="co1">-- of s cells each, where s = size.</span>
blocks <span class="sy0">::</span> <span class="br0">&#91;</span><span class="br0">&#91;</span>Cell<span class="br0">&#93;</span><span class="br0">&#93;</span>
blocks <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#91;</span><span class="br0">&#40;</span>x <span class="sy0">+</span> i<span class="sy0">,</span> y <span class="sy0">+</span> j<span class="br0">&#41;</span> <span class="sy0">|</span> i <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>sqrtSize<span class="br0">&#93;</span><span class="sy0">,</span> j <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>sqrtSize<span class="br0">&#93;</span><span class="br0">&#93;</span> <span class="sy0">|</span>
          x <span class="sy0">&lt;-</span> <span class="br0">&#91;</span><span class="nu0">0</span><span class="sy0">,</span>sqrtSize<span class="sy0">..</span>size<span class="sy0">-</span>sqrtSize<span class="br0">&#93;</span><span class="sy0">,</span>
          y <span class="sy0">&lt;-</span> <span class="br0">&#91;</span><span class="nu0">0</span><span class="sy0">,</span>sqrtSize<span class="sy0">..</span>size<span class="sy0">-</span>sqrtSize<span class="br0">&#93;</span><span class="br0">&#93;</span>
&#160;
<span class="co1">-- The one-based number of the block that a cell is contained in.</span>
blockNum <span class="sy0">::</span> Cell <span class="sy0">-&gt;</span> <span class="kw4">Int</span>
blockNum <span class="br0">&#40;</span>row<span class="sy0">,</span> col<span class="br0">&#41;</span> <span class="sy0">=</span> row <span class="sy0">-</span> <span class="br0">&#40;</span>row <span class="sy0">-</span> 1<span class="br0">&#41;</span> `<span class="kw3">mod</span>` sqrtSize <span class="sy0">+</span> <span class="br0">&#40;</span>col <span class="sy0">-</span> 1<span class="br0">&#41;</span> `<span class="kw3">div</span>` sqrtSize
&#160;
<span class="co1">-- When a Sudoku puzzle has been partially filled in, the following</span>
<span class="co1">-- data structure represents the remaining options for how to proceed.</span>
<span class="kw1">data</span> Options <span class="sy0">=</span> Options <span class="br0">&#123;</span>
    cellOpts <span class="sy0">::</span> <span class="br0">&#91;</span><span class="br0">&#91;</span><span class="br0">&#91;</span>Value<span class="br0">&#93;</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="co1">-- For each cell, a list of possible values</span>
    rowOpts  <span class="sy0">::</span> <span class="br0">&#91;</span><span class="br0">&#91;</span><span class="br0">&#91;</span>Cell <span class="br0">&#93;</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="co1">-- For each row    and value, a list of cells</span>
    colOpts  <span class="sy0">::</span> <span class="br0">&#91;</span><span class="br0">&#91;</span><span class="br0">&#91;</span>Cell <span class="br0">&#93;</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="co1">-- For each column and value, a list of cells</span>
    blkOpts  <span class="sy0">::</span> <span class="br0">&#91;</span><span class="br0">&#91;</span><span class="br0">&#91;</span>Cell <span class="br0">&#93;</span><span class="br0">&#93;</span><span class="br0">&#93;</span>  <span class="co1">-- For each block  and value, a list of cells</span>
  <span class="br0">&#125;</span> <span class="kw1">deriving</span> <span class="kw4">Show</span>
modifyCellOpts f <span class="sy0">=</span> <span class="kw1">do</span> <span class="br0">&#123;</span>opts <span class="sy0">&lt;-</span> get; put <span class="sy0">$</span> opts <span class="br0">&#123;</span>cellOpts <span class="sy0">=</span> f <span class="sy0">$</span> cellOpts opts<span class="br0">&#125;</span><span class="br0">&#125;</span>
modifyRowOpts  f <span class="sy0">=</span> <span class="kw1">do</span> <span class="br0">&#123;</span>opts <span class="sy0">&lt;-</span> get; put <span class="sy0">$</span> opts <span class="br0">&#123;</span>rowOpts  <span class="sy0">=</span> f <span class="sy0">$</span> rowOpts  opts<span class="br0">&#125;</span><span class="br0">&#125;</span>
modifyColOpts  f <span class="sy0">=</span> <span class="kw1">do</span> <span class="br0">&#123;</span>opts <span class="sy0">&lt;-</span> get; put <span class="sy0">$</span> opts <span class="br0">&#123;</span>colOpts  <span class="sy0">=</span> f <span class="sy0">$</span> colOpts  opts<span class="br0">&#125;</span><span class="br0">&#125;</span>
modifyBlkOpts  f <span class="sy0">=</span> <span class="kw1">do</span> <span class="br0">&#123;</span>opts <span class="sy0">&lt;-</span> get; put <span class="sy0">$</span> opts <span class="br0">&#123;</span>blkOpts  <span class="sy0">=</span> f <span class="sy0">$</span> blkOpts  opts<span class="br0">&#125;</span><span class="br0">&#125;</span>
&#160;
<span class="co1">-- The full set of initial options, before any cells are constrained</span>
initOptions <span class="sy0">::</span> Options
initOptions <span class="sy0">=</span> Options <span class="br0">&#123;</span>
  cellOpts <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#91;</span><span class="br0">&#91;</span>1<span class="sy0">..</span>size<span class="br0">&#93;</span> <span class="sy0">|</span> <span class="sy0">_</span> <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>size<span class="br0">&#93;</span><span class="br0">&#93;</span> <span class="sy0">|</span> <span class="sy0">_</span> <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>size<span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy0">,</span>
  rowOpts  <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#91;</span><span class="br0">&#91;</span><span class="br0">&#40;</span>r<span class="sy0">,</span> c<span class="br0">&#41;</span>   <span class="sy0">|</span> c <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>size<span class="br0">&#93;</span><span class="br0">&#93;</span> <span class="sy0">|</span> <span class="sy0">_</span> <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>size<span class="br0">&#93;</span><span class="br0">&#93;</span> <span class="sy0">|</span> r <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>size<span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy0">,</span>
  colOpts  <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#91;</span><span class="br0">&#91;</span><span class="br0">&#40;</span>r<span class="sy0">,</span> c<span class="br0">&#41;</span>   <span class="sy0">|</span> r <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>size<span class="br0">&#93;</span><span class="br0">&#93;</span> <span class="sy0">|</span> <span class="sy0">_</span> <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>size<span class="br0">&#93;</span><span class="br0">&#93;</span> <span class="sy0">|</span> c <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>size<span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy0">,</span>
  blkOpts  <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#91;</span>b         <span class="sy0">|</span> <span class="sy0">_</span> <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>size<span class="br0">&#93;</span><span class="br0">&#93;</span> <span class="sy0">|</span> b <span class="sy0">&lt;-</span> blocks<span class="br0">&#93;</span><span class="br0">&#125;</span>
&#160;
solve <span class="sy0">::</span> Puzzle <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>Solution<span class="br0">&#93;</span>
solve puz <span class="sy0">=</span> evalStateT <span class="br0">&#40;</span>initPuzzle <span class="sy0">&gt;&gt;</span> solutions<span class="br0">&#41;</span> initOptions
  <span class="kw1">where</span>
    initPuzzle <span class="sy0">=</span>
      <span class="kw3">sequence_</span> <span class="br0">&#91;</span>fixCell v <span class="br0">&#40;</span>r<span class="sy0">,</span> c<span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>row<span class="sy0">,</span> r<span class="br0">&#41;</span> <span class="sy0">&lt;-</span> <span class="kw3">zip</span> puz <span class="br0">&#91;</span>1<span class="sy0">..</span><span class="br0">&#93;</span><span class="sy0">,</span>
                                    <span class="br0">&#40;</span>val<span class="sy0">,</span> c<span class="br0">&#41;</span> <span class="sy0">&lt;-</span> <span class="kw3">zip</span> row <span class="br0">&#91;</span>1<span class="sy0">..</span><span class="br0">&#93;</span><span class="sy0">,</span>
                                    v <span class="sy0">&lt;-</span> maybeToList val<span class="br0">&#93;</span>
&#160;
<span class="co1">-- Build a list of all possible solutions given the current options.</span>
<span class="co1">-- We use a list monad INSIDE a state monad. That way,</span>
<span class="co1">-- the state is re-initialized on each element of the list iteration,</span>
<span class="co1">-- allowing backtracking when an attempt fails (with mzero).</span>
solutions <span class="sy0">::</span> StateT Options <span class="br0">&#91;</span><span class="br0">&#93;</span> Solution
solutions <span class="sy0">=</span> solveFromRow 1
  <span class="kw1">where</span>
    solveFromRow r
     <span class="sy0">|</span> r <span class="sy0">&gt;</span> size  <span class="sy0">=</span> <span class="kw3">return</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
     <span class="sy0">|</span> <span class="kw3">otherwise</span> <span class="sy0">=</span> <span class="kw1">do</span>
         row  <span class="sy0">&lt;-</span> solveRowFromCol r 1
         rows <span class="sy0">&lt;-</span> solveFromRow <span class="sy0">$</span> r <span class="sy0">+</span> 1
         <span class="kw3">return</span> <span class="sy0">$</span> row&#160;: rows
    solveRowFromCol r c
     <span class="sy0">|</span> c <span class="sy0">&gt;</span> size  <span class="sy0">=</span> <span class="kw3">return</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
     <span class="sy0">|</span> <span class="kw3">otherwise</span> <span class="sy0">=</span> <span class="kw1">do</span>
         vals <span class="sy0">&lt;-</span> gets <span class="sy0">$</span> <span class="br0">&#40;</span><span class="sy0">!!</span> <span class="br0">&#40;</span>c <span class="sy0">-</span> 1<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">.</span> <span class="br0">&#40;</span><span class="sy0">!!</span> <span class="br0">&#40;</span>r <span class="sy0">-</span> 1<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">.</span> cellOpts
         val <span class="sy0">&lt;-</span> lift vals
         fixCell val <span class="br0">&#40;</span>r<span class="sy0">,</span> c<span class="br0">&#41;</span>
         row <span class="sy0">&lt;-</span> solveRowFromCol r <span class="br0">&#40;</span>c <span class="sy0">+</span> 1<span class="br0">&#41;</span>
         <span class="kw3">return</span> <span class="sy0">$</span> val&#160;: row
&#160;
<span class="co1">-- Fix the value of a cell.</span>
<span class="co1">-- More specifically - update Options to reflect the given value at</span>
<span class="co1">-- the given cell, or mzero if that is not possible.</span>
fixCell <span class="sy0">::</span> <span class="br0">&#40;</span>MonadState Options m<span class="sy0">,</span> MonadPlus m<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
           Value <span class="sy0">-&gt;</span> Cell <span class="sy0">-&gt;</span> m <span class="br0">&#40;</span><span class="br0">&#41;</span>
fixCell val cell<span class="sy0">@</span><span class="br0">&#40;</span>row<span class="sy0">,</span> col<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw1">do</span>
    vals <span class="sy0">&lt;-</span> gets <span class="sy0">$</span> <span class="br0">&#40;</span><span class="sy0">!!</span> <span class="br0">&#40;</span>col <span class="sy0">-</span> 1<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">.</span> <span class="br0">&#40;</span><span class="sy0">!!</span> <span class="br0">&#40;</span>row <span class="sy0">-</span> 1<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">.</span> cellOpts
    guard <span class="sy0">$</span> val `<span class="kw3">elem</span>` vals
    modifyCellOpts <span class="sy0">$</span> replace2 row col <span class="br0">&#91;</span>val<span class="br0">&#93;</span>
    modifyRowOpts  <span class="sy0">$</span> replace2 row val <span class="br0">&#91;</span>cell<span class="br0">&#93;</span>
    modifyColOpts  <span class="sy0">$</span> replace2 col val <span class="br0">&#91;</span>cell<span class="br0">&#93;</span>
    modifyBlkOpts  <span class="sy0">$</span> replace2 blk val <span class="br0">&#91;</span>cell<span class="br0">&#93;</span>
    <span class="kw3">sequence_</span> <span class="br0">&#91;</span>constrainCell v   cell     <span class="sy0">|</span> v <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>size<span class="br0">&#93;</span><span class="sy0">,</span> v <span class="sy0">/=</span> val<span class="br0">&#93;</span>
    <span class="kw3">sequence_</span> <span class="br0">&#91;</span>constrainCell val <span class="br0">&#40;</span>row<span class="sy0">,</span> c<span class="br0">&#41;</span> <span class="sy0">|</span> c <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>size<span class="br0">&#93;</span><span class="sy0">,</span> c <span class="sy0">/=</span> col<span class="br0">&#93;</span>
    <span class="kw3">sequence_</span> <span class="br0">&#91;</span>constrainCell val <span class="br0">&#40;</span>r<span class="sy0">,</span> col<span class="br0">&#41;</span> <span class="sy0">|</span> r <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>size<span class="br0">&#93;</span><span class="sy0">,</span> r <span class="sy0">/=</span> row<span class="br0">&#93;</span>
    <span class="kw3">sequence_</span> <span class="br0">&#91;</span>constrainCell val c <span class="sy0">|</span> c <span class="sy0">&lt;-</span> blocks <span class="sy0">!!</span> <span class="br0">&#40;</span>blk <span class="sy0">-</span> 1<span class="br0">&#41;</span><span class="sy0">,</span> c <span class="sy0">/=</span> cell<span class="br0">&#93;</span>
  <span class="kw1">where</span>
    blk <span class="sy0">=</span> blockNum cell
&#160;
<span class="co1">-- Assert that the given value cannot occur in the given cell.</span>
<span class="co1">-- Fail with mzero if that means that there are no options left.</span>
constrainCell <span class="sy0">::</span> <span class="br0">&#40;</span>MonadState Options m<span class="sy0">,</span> MonadPlus m<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
                 Value <span class="sy0">-&gt;</span> Cell <span class="sy0">-&gt;</span> m <span class="br0">&#40;</span><span class="br0">&#41;</span>
constrainCell val cell<span class="sy0">@</span><span class="br0">&#40;</span>row<span class="sy0">,</span> col<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw1">do</span>
    constrainOpts row col val  cellOpts modifyCellOpts <span class="br0">&#40;</span><span class="kw3">flip</span> fixCell cell<span class="br0">&#41;</span>
    constrainOpts row val cell rowOpts  modifyRowOpts  <span class="br0">&#40;</span>fixCell val<span class="br0">&#41;</span>
    constrainOpts col val cell colOpts  modifyColOpts  <span class="br0">&#40;</span>fixCell val<span class="br0">&#41;</span>
    constrainOpts blk val cell blkOpts  modifyBlkOpts  <span class="br0">&#40;</span>fixCell val<span class="br0">&#41;</span>
  <span class="kw1">where</span>
    blk <span class="sy0">=</span> blockNum cell
    constrainOpts x y z getOpts modifyOpts fixOpts <span class="sy0">=</span> <span class="kw1">do</span>
      zs <span class="sy0">&lt;-</span> gets <span class="sy0">$</span> <span class="br0">&#40;</span><span class="sy0">!!</span> <span class="br0">&#40;</span>y <span class="sy0">-</span> 1<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">.</span> <span class="br0">&#40;</span><span class="sy0">!!</span> <span class="br0">&#40;</span>x <span class="sy0">-</span> 1<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">.</span> getOpts
      <span class="kw1">case</span> zs <span class="kw1">of</span>
        <span class="br0">&#91;</span>z'<span class="br0">&#93;</span>  <span class="sy0">-&gt;</span> guard <span class="br0">&#40;</span>z' <span class="sy0">/=</span> z<span class="br0">&#41;</span>
        <span class="br0">&#91;</span><span class="sy0">_,_</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> when <span class="br0">&#40;</span>z `<span class="kw3">elem</span>` zs<span class="br0">&#41;</span> <span class="sy0">$</span> fixOpts <span class="br0">&#40;</span><span class="kw3">head</span> <span class="sy0">$</span> delete z zs<span class="br0">&#41;</span>
        <span class="br0">&#40;</span><span class="sy0">_</span>:<span class="sy0">_</span><span class="br0">&#41;</span> <span class="sy0">-&gt;</span> modifyOpts <span class="sy0">$</span> replace2 x y <span class="br0">&#40;</span>delete z zs<span class="br0">&#41;</span>
        <span class="sy0">_</span>     <span class="sy0">-&gt;</span> mzero
&#160;
<span class="co1">-- Replace one element of a list.</span>
<span class="co1">-- Coordinates are 1-based.</span>
replace <span class="sy0">::</span> <span class="kw4">Int</span> <span class="sy0">-&gt;</span> a <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span>
replace i x <span class="br0">&#40;</span>y:ys<span class="br0">&#41;</span>
 <span class="sy0">|</span> i <span class="sy0">&gt;</span> 1     <span class="sy0">=</span> y&#160;: replace <span class="br0">&#40;</span>i <span class="sy0">-</span> 1<span class="br0">&#41;</span> x ys
 <span class="sy0">|</span> <span class="kw3">otherwise</span> <span class="sy0">=</span> x&#160;: ys
replace <span class="sy0">_</span> <span class="sy0">_</span> <span class="sy0">_</span> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
&#160;
<span class="co1">-- Replace one element of a 2-dimensional list.</span>
<span class="co1">-- Coordinates are 1-based.</span>
replace2 <span class="sy0">::</span> <span class="kw4">Int</span> <span class="sy0">-&gt;</span> <span class="kw4">Int</span> <span class="sy0">-&gt;</span> a <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="br0">&#91;</span>a<span class="br0">&#93;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="br0">&#91;</span>a<span class="br0">&#93;</span><span class="br0">&#93;</span>
replace2 i j x <span class="br0">&#40;</span>y:ys<span class="br0">&#41;</span>
 <span class="sy0">|</span> i <span class="sy0">&gt;</span> 1     <span class="sy0">=</span> y&#160;: replace2 <span class="br0">&#40;</span>i <span class="sy0">-</span> 1<span class="br0">&#41;</span> j x ys
 <span class="sy0">|</span> <span class="kw3">otherwise</span> <span class="sy0">=</span> replace j x y&#160;: ys
replace2 <span class="sy0">_</span> <span class="sy0">_</span> <span class="sy0">_</span> <span class="sy0">_</span> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span></pre></div></div>
<h2> <span class="mw-headline" id="In-flight_entertainment">12  In-flight entertainment </span></h2>
<pre> By Lennart Augustsson
</pre>
<p>When on a Lufthansa trans-atlantic flight in 2005 I picked up the in-flight magazine and found a Sudoku puzzle.  I decided to finally try one.  After solving half of it by hand I got bored.  Surely, this mechanical task is better performed by a machine?  So I pulled out my laptop and wrote a Haskell program.
</p><p>The program below is what I wrote on the plane, except for some comments that I've added.  I have made no attempt as making it fast, so the nefarious test puzzle below takes a minute to solve.
</p><p>First, the solver without user interface:
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="kw1">module</span> Sudoku<span class="br0">&#40;</span>Square<span class="sy0">,</span> Board<span class="sy0">,</span> ColDigit<span class="sy0">,</span> RowDigit<span class="sy0">,</span> BoxDigit<span class="sy0">,</span> Digit<span class="sy0">,</span> initialBoard<span class="sy0">,</span> getBoard<span class="sy0">,</span> mkSquare<span class="sy0">,</span> setSquare<span class="sy0">,</span> solveMany<span class="br0">&#41;</span> <span class="kw1">where</span>
<span class="kw1">import</span> <span class="kw4">Char</span><span class="br0">&#40;</span>intToDigit<span class="sy0">,</span> digitToInt<span class="br0">&#41;</span>
<span class="kw1">import</span> List <span class="br0">&#40;</span><span class="br0">&#40;</span>\\<span class="br0">&#41;</span><span class="sy0">,</span> sortBy<span class="br0">&#41;</span>
&#160;
<span class="co1">-- A board is just a list of Squares.  It always has all the squares.</span>
<span class="kw1">data</span> Board <span class="sy0">=</span> Board <span class="br0">&#91;</span>Square<span class="br0">&#93;</span>
	<span class="kw1">deriving</span> <span class="br0">&#40;</span><span class="kw4">Show</span><span class="br0">&#41;</span>
&#160;
<span class="co1">-- A Square contains its column (ColDigit), row (RowDigit), and</span>
<span class="co1">-- which 3x3 box it belongs to (BoxDigit).  The box can be computed</span>
<span class="co1">-- from the row and column, but is kept for speed.</span>
<span class="co1">-- A Square also contains it's status: either a list of possible</span>
<span class="co1">-- digits that can be placed in the square OR a fixed digit (i.e.,</span>
<span class="co1">-- the square was given by a clue or has been solved).</span>
<span class="kw1">data</span> Square <span class="sy0">=</span> Square ColDigit RowDigit BoxDigit <span class="br0">&#40;</span><span class="kw4">Either</span> <span class="br0">&#91;</span>Digit<span class="br0">&#93;</span> Digit<span class="br0">&#41;</span>
	<span class="kw1">deriving</span> <span class="br0">&#40;</span><span class="kw4">Show</span><span class="br0">&#41;</span>
&#160;
<span class="kw1">type</span> ColDigit <span class="sy0">=</span> Digit
<span class="kw1">type</span> RowDigit <span class="sy0">=</span> Digit
<span class="kw1">type</span> BoxDigit <span class="sy0">=</span> Digit
<span class="kw1">type</span> Digit <span class="sy0">=</span> <span class="kw4">Char</span>	<span class="co1">-- '1' .. '9'</span>
&#160;
<span class="co1">-- The initial board, no clues given so all digits are possible in all squares.</span>
initialBoard <span class="sy0">::</span> Board
initialBoard <span class="sy0">=</span> Board <span class="br0">&#91;</span> Square col row <span class="br0">&#40;</span>boxDigit col row<span class="br0">&#41;</span> <span class="br0">&#40;</span>Left allDigits<span class="br0">&#41;</span> <span class="sy0">|</span>
		       row <span class="sy0">&lt;-</span> allDigits<span class="sy0">,</span> col <span class="sy0">&lt;-</span> allDigits <span class="br0">&#93;</span>
&#160;
<span class="co1">-- Return a list of rows of a solved board.</span>
<span class="co1">-- If used on an unsolved board the return value is unspecified.</span>
getBoard <span class="sy0">::</span> Board <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="br0">&#91;</span><span class="kw4">Char</span><span class="br0">&#93;</span><span class="br0">&#93;</span>
getBoard <span class="br0">&#40;</span>Board sqs<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="br0">&#91;</span> <span class="br0">&#91;</span> getDigit d <span class="sy0">|</span> Square <span class="sy0">_</span> row' <span class="sy0">_</span> d <span class="sy0">&lt;-</span> sqs<span class="sy0">,</span> row' <span class="sy0">==</span> row <span class="br0">&#93;</span> <span class="sy0">|</span> row <span class="sy0">&lt;-</span> allDigits <span class="br0">&#93;</span>
  <span class="kw1">where</span> getDigit <span class="br0">&#40;</span>Right d<span class="br0">&#41;</span> <span class="sy0">=</span> d
        getDigit <span class="sy0">_</span> <span class="sy0">=</span> '0'
&#160;
allDigits <span class="sy0">::</span> <span class="br0">&#91;</span><span class="kw4">Char</span><span class="br0">&#93;</span>
allDigits <span class="sy0">=</span> <span class="br0">&#91;</span>'<span class="nu0">1</span>' <span class="sy0">..</span> '<span class="nu0">9</span>'<span class="br0">&#93;</span>
&#160;
<span class="co1">-- Compute the box from a column and row.</span>
boxDigit <span class="sy0">::</span> ColDigit <span class="sy0">-&gt;</span> RowDigit <span class="sy0">-&gt;</span> BoxDigit
boxDigit c r <span class="sy0">=</span> intToDigit <span class="sy0">$</span> <span class="br0">&#40;</span>digitToInt c <span class="sy0">-</span> 1<span class="br0">&#41;</span> `<span class="kw3">div</span>` 3 <span class="sy0">+</span> <span class="br0">&#40;</span>digitToInt r <span class="sy0">-</span> 1<span class="br0">&#41;</span> `<span class="kw3">div</span>` <span class="nu0">3</span> <span class="sy0">*</span> <span class="nu0">3</span> <span class="sy0">+</span> <span class="nu0">1</span>
&#160;
<span class="co1">-- Given a column, row, and a digit make a (solved) square representing this.</span>
mkSquare <span class="sy0">::</span> ColDigit <span class="sy0">-&gt;</span> RowDigit <span class="sy0">-&gt;</span> Digit <span class="sy0">-&gt;</span> Square
mkSquare col row c <span class="sy0">|</span> col `<span class="kw3">elem</span>` allDigits <span class="sy0">&amp;&amp;</span> row `<span class="kw3">elem</span>` allDigits <span class="sy0">&amp;&amp;</span> c `<span class="kw3">elem</span>` allDigits 
                   <span class="sy0">=</span> Square col row <span class="br0">&#40;</span>boxDigit col row<span class="br0">&#41;</span> <span class="br0">&#40;</span>Right c<span class="br0">&#41;</span>
mkSquare <span class="sy0">_</span> <span class="sy0">_</span> <span class="sy0">_</span> <span class="sy0">=</span> <span class="kw3">error</span> <span class="st0">&quot;Bad mkSquare&quot;</span>
&#160;
<span class="co1">-- Place a given Square on a Board and return the new Board.</span>
<span class="co1">-- Illegal setSquare calls will just error out.  The main work here</span>
<span class="co1">-- is to remove the placed digit from the other Squares on the board</span>
<span class="co1">-- that are in the same column, row, or box.</span>
setSquare <span class="sy0">::</span> Square <span class="sy0">-&gt;</span> Board <span class="sy0">-&gt;</span> Board
setSquare sq<span class="sy0">@</span><span class="br0">&#40;</span>Square scol srow sbox <span class="br0">&#40;</span>Right d<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>Board sqs<span class="br0">&#41;</span> <span class="sy0">=</span> Board <span class="br0">&#40;</span><span class="kw3">map</span> set sqs<span class="br0">&#41;</span>
  <span class="kw1">where</span> set osq<span class="sy0">@</span><span class="br0">&#40;</span>Square col row box ds<span class="br0">&#41;</span> <span class="sy0">=</span>
	    <span class="kw1">if</span> col <span class="sy0">==</span> scol <span class="sy0">&amp;&amp;</span> row <span class="sy0">==</span> srow <span class="kw1">then</span> sq
	    <span class="kw1">else</span> <span class="kw1">if</span> col <span class="sy0">==</span> scol <span class="sy0">||</span> row <span class="sy0">==</span> srow <span class="sy0">||</span> box <span class="sy0">==</span> sbox <span class="kw1">then</span> <span class="br0">&#40;</span>Square col row box <span class="br0">&#40;</span>sub ds<span class="br0">&#41;</span><span class="br0">&#41;</span>
	    <span class="kw1">else</span> osq
	sub <span class="br0">&#40;</span>Left ds<span class="br0">&#41;</span> <span class="sy0">=</span> Left <span class="br0">&#40;</span>ds \\ <span class="br0">&#91;</span>d<span class="br0">&#93;</span><span class="br0">&#41;</span>
        sub <span class="br0">&#40;</span>Right d'<span class="br0">&#41;</span> <span class="sy0">|</span> d <span class="sy0">==</span> d' <span class="sy0">=</span> <span class="kw3">error</span> <span class="st0">&quot;Impossible setSquare&quot;</span>
	sub dd <span class="sy0">=</span> dd
setSquare <span class="sy0">_</span> <span class="sy0">_</span> <span class="sy0">=</span> <span class="kw3">error</span> <span class="st0">&quot;Bad setSquare&quot;</span>
&#160;
<span class="co1">-- Get the unsolved Squares from a Board.</span>
getLeftSquares <span class="sy0">::</span> Board <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>Square<span class="br0">&#93;</span>
getLeftSquares <span class="br0">&#40;</span>Board sqs<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="br0">&#91;</span> sq <span class="sy0">|</span> sq<span class="sy0">@</span><span class="br0">&#40;</span>Square <span class="sy0">_</span> <span class="sy0">_</span> <span class="sy0">_</span> <span class="br0">&#40;</span>Left <span class="sy0">_</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">&lt;-</span> sqs <span class="br0">&#93;</span>
&#160;
<span class="co1">-- Given an initial Board return all the possible solutions starting</span>
<span class="co1">-- from that Board.</span>
<span class="co1">-- Note, this all happens in the list monad and makes use of lazy evaluation</span>
<span class="co1">-- to avoid work.  Using the list monad automatically handles all the backtracking</span>
<span class="co1">-- and enumeration of solutions.</span>
solveMany <span class="sy0">::</span> Board <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>Board<span class="br0">&#93;</span>
solveMany brd <span class="sy0">=</span>
    <span class="kw1">case</span> getLeftSquares brd <span class="kw1">of</span>
    <span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="kw3">return</span> brd            <span class="co1">-- Nothing unsolved remains, we are done.</span>
    sqs <span class="sy0">-&gt;</span> <span class="kw1">do</span>
	<span class="co1">-- Sort the unsolved Squares by the ascending length of the possible</span>
	<span class="co1">-- digits.  Pick the first of those so we always solve forced Squares</span>
	<span class="co1">-- first.</span>
	<span class="kw1">let</span> Square c r b <span class="br0">&#40;</span>Left ds<span class="br0">&#41;</span>&#160;: <span class="sy0">_</span> <span class="sy0">=</span> sortBy leftLen sqs
	    leftLen <span class="br0">&#40;</span>Square <span class="sy0">_</span> <span class="sy0">_</span> <span class="sy0">_</span> <span class="br0">&#40;</span>Left ds1<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>Square <span class="sy0">_</span> <span class="sy0">_</span> <span class="sy0">_</span> <span class="br0">&#40;</span>Left ds2<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw3">compare</span> <span class="br0">&#40;</span><span class="kw3">length</span> ds1<span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw3">length</span> ds2<span class="br0">&#41;</span>
	    leftLen <span class="sy0">_</span> <span class="sy0">_</span> <span class="sy0">=</span> <span class="kw3">error</span> <span class="st0">&quot;bad leftLen&quot;</span>
        sq <span class="sy0">&lt;-</span> <span class="br0">&#91;</span> Square c r b <span class="br0">&#40;</span>Right d<span class="br0">&#41;</span> <span class="sy0">|</span> d <span class="sy0">&lt;-</span> ds <span class="br0">&#93;</span> <span class="co1">-- Try all possible moves</span>
        solveMany <span class="br0">&#40;</span>setSquare sq brd<span class="br0">&#41;</span> <span class="co1">-- And solve the extended Board.</span></pre></div></div>
<p>Second, a simple user interface (a different user interface that I have is an Excell addin):
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="kw1">module</span> Main <span class="kw1">where</span>
<span class="kw1">import</span> Sudoku
&#160;
<span class="co1">--         Col    Row   Digit</span>
solve <span class="sy0">::</span> <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">Char</span><span class="sy0">,</span> <span class="kw4">Char</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="kw4">Char</span><span class="br0">&#41;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="br0">&#91;</span><span class="kw4">Char</span><span class="br0">&#93;</span><span class="br0">&#93;</span>
solve crds <span class="sy0">=</span>
    <span class="kw1">let</span> brd <span class="sy0">=</span> <span class="kw3">foldr</span> add initialBoard crds
        add <span class="br0">&#40;</span><span class="br0">&#40;</span>c<span class="sy0">,</span> r<span class="br0">&#41;</span><span class="sy0">,</span> d<span class="br0">&#41;</span> <span class="sy0">=</span> setSquare <span class="br0">&#40;</span>mkSquare c r d<span class="br0">&#41;</span>
    <span class="kw1">in</span>  <span class="kw1">case</span> solveMany brd <span class="kw1">of</span>
	<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="kw3">error</span> <span class="st0">&quot;No solutions&quot;</span>
        b&#160;: <span class="sy0">_</span> <span class="sy0">-&gt;</span> getBoard b
&#160;
<span class="co1">-- The parse assumes that squares without a clue</span>
<span class="co1">-- contain '0'.</span>
main <span class="sy0">=</span> <span class="kw3">interact</span> <span class="sy0">$</span>
     <span class="kw3">unlines</span> <span class="sy0">.</span>                                             <span class="co1">-- turn it into lines</span>
     <span class="kw3">map</span> <span class="br0">&#40;</span><span class="kw3">concatMap</span> <span class="br0">&#40;</span>:<span class="st0">&quot; &quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">.</span>                              <span class="co1">-- add a space after each digit for readability</span>
     solve <span class="sy0">.</span>                                               <span class="co1">-- solve the puzzle</span>
     <span class="kw3">filter</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>`<span class="kw3">elem</span>` <span class="br0">&#91;</span>'1'<span class="sy0">..</span>'9'<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy0">.</span> <span class="kw3">snd</span><span class="br0">&#41;</span> <span class="sy0">.</span>                  <span class="co1">-- get rid of non-clues</span>
     <span class="kw3">zip</span> <span class="br0">&#91;</span> <span class="br0">&#40;</span>c<span class="sy0">,</span> r<span class="br0">&#41;</span> <span class="sy0">|</span> r <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>'<span class="nu0">1</span>'<span class="sy0">..</span>'<span class="nu0">9</span>'<span class="br0">&#93;</span><span class="sy0">,</span> c <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>'<span class="nu0">1</span>'<span class="sy0">..</span>'<span class="nu0">9</span>'<span class="br0">&#93;</span> <span class="br0">&#93;</span> <span class="sy0">.</span>   <span class="co1">-- pair up the digits with their coordinates</span>
     <span class="kw3">filter</span> <span class="br0">&#40;</span>`<span class="kw3">elem</span>` <span class="br0">&#91;</span>'<span class="nu0">0</span>'<span class="sy0">..</span>'<span class="nu0">9</span>'<span class="br0">&#93;</span><span class="br0">&#41;</span>                            <span class="co1">-- get rid of non-digits</span></pre></div></div>
<p><br />
</p>
<h2> <span class="mw-headline" id="Sudoku_incrementally.2C_.C3.A0_la_Bird">13  Sudoku incrementally, à la Bird </span></h2>
<dl><dd>As part of a new <a rel="nofollow" class="external text" href="http://cs.nott.ac.uk/~gmh/afp.html">Advanced Functional Programming</a> course in Nottingham, <a rel="nofollow" class="external text" href="http://cs.nott.ac.uk/~gmh/">Graham Hutton</a> presented a Haskell approach to solving Sudoku puzzles, based upon notes from <a rel="nofollow" class="external text" href="http://web.comlab.ox.ac.uk/oucl/work/richard.bird/">Richard Bird</a>. The approach is classic Bird: start with a simple but impractical solver, whose efficiency is then improved in a series of steps. The end result is an elegant program that is able to solve any Sudoku puzzle in an instant. Its also an excellent example of what has been termed wholemeal programming  focusing on entire data structures rather than their elements. (Transplanted from <a rel="nofollow" class="external text" href="http://lambda-the-ultimate.org/node/772">LtU</a>.)
</dd></dl>
<p>A full talk-through of the evolution of the code may be found <a rel="nofollow" class="external text" href="http://cs.nott.ac.uk/~gmh/sudoku.lhs">under the course page</a>. --<a href="/haskellwiki/index.php?title=User:Liyang&amp;action=edit&amp;redlink=1" class="new" title="User:Liyang (page does not exist)">Liyang</a> 13:35, 27 July 2006 (UTC)
</p><p>I've also written <a href="/wikiupload/1/12/SudokuWss.hs" class="internal" title="SudokuWss.hs">Media:sudokuWss.hs</a>, a parallel version of this solver. It uses STM to prune the boxes, columns, and rows simultaneously, which is kind of cool. I'm pretty sure it can be optimized quite a bit...  --WouterSwierstra, August 2007.
</p>
<h2> <span class="mw-headline" id="607_bytes_.2F_12_lines">14  607 bytes / 12 lines </span></h2>
<p>A super quick attempt at a smallest solution, based on the
<a rel="nofollow" class="external text" href="http://web.math.unifi.it/users/maggesi/haskell_sudoku_solver.html">707 byte sudoku</a> solver:
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="kw1">import</span> List
&#160;
main <span class="sy0">=</span> <span class="kw3">putStr</span> <span class="sy0">.</span> <span class="kw3">unlines</span> <span class="sy0">.</span> <span class="kw3">map</span> disp <span class="sy0">.</span> solve <span class="sy0">.</span> <span class="kw3">return</span> <span class="sy0">.</span> input <span class="sy0">=&lt;&lt;</span> <span class="kw3">getContents</span>
&#160;
solve s <span class="sy0">=</span> <span class="kw3">foldr</span> <span class="br0">&#40;</span>\p l <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>mark <span class="br0">&#40;</span>p<span class="sy0">,</span>n<span class="br0">&#41;</span> s <span class="sy0">|</span> s <span class="sy0">&lt;-</span> l<span class="sy0">,</span> n <span class="sy0">&lt;-</span> s p<span class="br0">&#93;</span><span class="br0">&#41;</span> s idx
&#160;
mark <span class="br0">&#40;</span>p<span class="sy0">@</span><span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span><span class="sy0">,</span>n<span class="br0">&#41;</span> s q<span class="sy0">@</span><span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span>
    <span class="sy0">|</span> p <span class="sy0">==</span> q                             <span class="sy0">=</span> <span class="br0">&#91;</span>n<span class="br0">&#93;</span>
    <span class="sy0">|</span> x <span class="sy0">==</span> i <span class="sy0">||</span> y <span class="sy0">==</span> j <span class="sy0">||</span> e x i <span class="sy0">&amp;&amp;</span> e y j <span class="sy0">=</span> delete n <span class="br0">&#40;</span>s q<span class="br0">&#41;</span>
    <span class="sy0">|</span> <span class="kw3">otherwise</span>                          <span class="sy0">=</span> s q
    <span class="kw1">where</span> e a b <span class="sy0">=</span> <span class="kw3">div</span> <span class="br0">&#40;</span>a<span class="sy0">-</span>1<span class="br0">&#41;</span> 3 <span class="sy0">==</span> <span class="kw3">div</span> <span class="br0">&#40;</span>b<span class="sy0">-</span>1<span class="br0">&#41;</span> 3
&#160;
disp s <span class="sy0">=</span> <span class="kw3">unlines</span> <span class="br0">&#91;</span><span class="kw3">unwords</span> <span class="br0">&#91;</span><span class="kw3">show</span> <span class="sy0">$</span> <span class="kw3">head</span> <span class="sy0">$</span> s <span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span> <span class="sy0">|</span> j <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="br0">&#93;</span> <span class="sy0">|</span> i <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="br0">&#93;</span>
&#160;
input s <span class="sy0">=</span> <span class="kw3">foldr</span> mark <span class="br0">&#40;</span><span class="kw3">const</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy0">$</span>
  <span class="br0">&#91;</span><span class="br0">&#40;</span>p<span class="sy0">,</span>n<span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>p<span class="sy0">,</span>n<span class="br0">&#41;</span> <span class="sy0">&lt;-</span> <span class="kw3">zip</span> idx <span class="sy0">$</span> <span class="kw3">map</span> <span class="kw3">read</span> <span class="sy0">$</span> <span class="kw3">lines</span> s <span class="sy0">&gt;&gt;=</span> <span class="kw3">words</span><span class="sy0">,</span> n<span class="sy0">&gt;</span>0<span class="br0">&#93;</span>
&#160;
idx <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#40;</span>i<span class="sy0">,</span>j<span class="br0">&#41;</span> <span class="sy0">|</span> i <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="sy0">,</span> j <span class="sy0">&lt;-</span> <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="br0">&#93;</span></pre></div></div>
<p>dons 07:54, 2 December 2006 (UTC)
</p>
<h2> <span class="mw-headline" id="A_parallel_solver">15  A parallel solver </span></h2>
<p>A parallel version of Richard Bird's function pearl solver by Wouter
Swierstra:
</p><p><a rel="nofollow" class="external free" href="http://www.haskell.org/sitewiki/images/1/12/SudokuWss.hs">http://www.haskell.org/sitewiki/images/1/12/SudokuWss.hs</a>
</p>
<h2> <span class="mw-headline" id="Another_simple_solver">16  Another simple solver </span></h2>
<p>One day I wrote a completely naive sudoku solver which tried all possibilities to try arrays in Haskell. It works, however I doubt that I'll see it actually solve a puzzle during my remaining lifetime.
</p><p>So I set out to improve it. The new version still tries all possibilities, but it starts with the cell that has a minimal number of possibilities.
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="kw1">import</span> Array
<span class="kw1">import</span> List
<span class="kw1">import</span> System
&#160;
<span class="co1">-- ([Possible Entries], #Possible Entries)</span>
<span class="kw1">type</span> Field <span class="sy0">=</span> Array <span class="br0">&#40;</span><span class="kw4">Int</span><span class="sy0">,</span><span class="kw4">Int</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="br0">&#91;</span><span class="kw4">Int</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw4">Int</span><span class="br0">&#41;</span>
&#160;
<span class="co1">-- Fields are Strings of Numbers with 0 in empty cells</span>
readField <span class="sy0">::</span><span class="kw4">String</span> <span class="sy0">-&gt;</span> Field
readField f <span class="sy0">=</span>  listArray <span class="br0">&#40;</span><span class="br0">&#40;</span>1<span class="sy0">,</span>1<span class="br0">&#41;</span><span class="sy0">,</span><span class="br0">&#40;</span>9<span class="sy0">,</span>9<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw3">map</span> <span class="br0">&#40;</span>\j <span class="sy0">-&gt;</span> <span class="kw1">let</span> n<span class="sy0">=</span><span class="kw3">read</span> <span class="br0">&#91;</span>j<span class="br0">&#93;</span><span class="sy0">::</span><span class="kw4">Int</span> <span class="kw1">in</span> <span class="kw1">if</span> n<span class="sy0">==</span>0 <span class="kw1">then</span> <span class="br0">&#40;</span><span class="br0">&#91;</span>0<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="sy0">,</span>9<span class="br0">&#41;</span> <span class="kw1">else</span> <span class="br0">&#40;</span><span class="br0">&#91;</span>n<span class="br0">&#93;</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span> f<span class="br0">&#41;</span>
&#160;
<span class="co1">-- x y wrong way -&gt; reading wrong? no effect on solution though</span>
showField <span class="sy0">::</span> Field <span class="sy0">-&gt;</span> <span class="kw4">String</span>
showField f <span class="sy0">=</span> <span class="kw3">unlines</span> <span class="br0">&#91;</span><span class="kw3">concat</span> <span class="br0">&#91;</span><span class="kw3">show</span> <span class="sy0">$</span> entry <span class="br0">&#40;</span>f<span class="sy0">!</span><span class="br0">&#40;</span>y<span class="sy0">,</span>x<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">|</span>x<span class="sy0">&lt;-</span><span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy0">|</span>y<span class="sy0">&lt;-</span><span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="br0">&#93;</span>
&#160;
printField <span class="sy0">::</span> <span class="kw4">Maybe</span> Field <span class="sy0">-&gt;</span> <span class="kw4">String</span>
printField <span class="br0">&#40;</span>Just f<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw3">concat</span> <span class="br0">&#91;</span><span class="kw3">concat</span> <span class="br0">&#91;</span><span class="kw3">show</span> <span class="sy0">$</span> entry f<span class="sy0">!</span><span class="br0">&#40;</span>y<span class="sy0">,</span>x<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">|</span>x<span class="sy0">&lt;-</span><span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy0">|</span>y<span class="sy0">&lt;-</span><span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="br0">&#93;</span>
printField Nothing <span class="sy0">=</span> <span class="st0">&quot;No solution&quot;</span>
&#160;
<span class="co1">-- true if cell is empty</span>
isEmpty <span class="sy0">::</span> <span class="br0">&#40;</span><span class="br0">&#91;</span><span class="kw4">Int</span><span class="br0">&#93;</span><span class="sy0">,</span><span class="kw4">Int</span><span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="kw4">Bool</span>
isEmpty <span class="br0">&#40;</span>xs<span class="sy0">,_</span><span class="br0">&#41;</span> <span class="sy0">=</span> xs <span class="sy0">==</span> <span class="br0">&#91;</span>0<span class="br0">&#93;</span>
&#160;
entry <span class="sy0">::</span> <span class="br0">&#40;</span><span class="br0">&#91;</span><span class="kw4">Int</span><span class="br0">&#93;</span><span class="sy0">,</span><span class="kw4">Int</span><span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="kw4">Int</span>
entry <span class="sy0">=</span> <span class="kw3">head</span><span class="sy0">.</span><span class="kw3">fst</span>
&#160;
<span class="co1">-- 0 possibilties left, no emtpy fields</span>
done <span class="sy0">::</span> Field <span class="sy0">-&gt;</span> <span class="kw4">Bool</span>
done a <span class="sy0">=</span> <span class="kw1">let</span> l<span class="sy0">=</span>elems a <span class="kw1">in</span> 0<span class="sy0">==</span><span class="kw3">foldr</span> <span class="br0">&#40;</span>\<span class="br0">&#40;</span><span class="sy0">_,</span>x<span class="br0">&#41;</span> y <span class="sy0">-&gt;</span> x<span class="sy0">+</span>y<span class="br0">&#41;</span> 0 l <span class="sy0">&amp;&amp;</span> <span class="kw3">all</span> <span class="br0">&#40;</span><span class="kw3">not</span><span class="sy0">.</span>isEmpty<span class="br0">&#41;</span> l
&#160;
<span class="co1">--return column/row/square containing coords (x,y), excluding (x,y)</span>
column<span class="sy0">::</span>Field <span class="sy0">-&gt;</span><span class="br0">&#40;</span><span class="kw4">Int</span><span class="sy0">,</span><span class="kw4">Int</span><span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="kw4">Int</span><span class="br0">&#93;</span>
column a <span class="sy0">~</span><span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span><span class="sy0">=</span> <span class="br0">&#91;</span>entry <span class="sy0">$</span> a<span class="sy0">!</span><span class="br0">&#40;</span>i<span class="sy0">,</span>y<span class="br0">&#41;</span><span class="sy0">|</span>i<span class="sy0">&lt;-</span><span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="sy0">,</span>i<span class="sy0">/=</span>x<span class="br0">&#93;</span>
&#160;
row <span class="sy0">::</span> Field <span class="sy0">-&gt;</span> <span class="br0">&#40;</span><span class="kw4">Int</span><span class="sy0">,</span><span class="kw4">Int</span><span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="kw4">Int</span><span class="br0">&#93;</span>
row a <span class="sy0">~</span><span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span><span class="sy0">=</span> <span class="br0">&#91;</span>entry <span class="sy0">$</span> a<span class="sy0">!</span><span class="br0">&#40;</span>x<span class="sy0">,</span>j<span class="br0">&#41;</span><span class="sy0">|</span>j<span class="sy0">&lt;-</span><span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span><span class="sy0">,</span>j<span class="sy0">/=</span>y<span class="br0">&#93;</span>
&#160;
square <span class="sy0">::</span> Field <span class="sy0">-&gt;</span> <span class="br0">&#40;</span><span class="kw4">Int</span><span class="sy0">,</span> <span class="kw4">Int</span><span class="br0">&#41;</span><span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="kw4">Int</span><span class="br0">&#93;</span>
square a <span class="sy0">~</span><span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span> <span class="sy0">=</span> block  
	<span class="kw1">where</span> 
	 n <span class="sy0">=</span> <span class="kw3">head</span> <span class="sy0">$</span> <span class="kw3">dropWhile</span> <span class="br0">&#40;</span><span class="sy0">&lt;</span>x<span class="sy0">-</span>3<span class="br0">&#41;</span> <span class="br0">&#91;</span>0<span class="sy0">,</span>3<span class="sy0">,</span>6<span class="br0">&#93;</span>
	 m <span class="sy0">=</span> <span class="kw3">head</span> <span class="sy0">$</span> <span class="kw3">dropWhile</span> <span class="br0">&#40;</span><span class="sy0">&lt;</span>y<span class="sy0">-</span>3<span class="br0">&#41;</span> <span class="br0">&#91;</span>0<span class="sy0">,</span>3<span class="sy0">,</span>6<span class="br0">&#93;</span>
	 block <span class="sy0">=</span> <span class="br0">&#91;</span>entry <span class="sy0">$</span> a<span class="sy0">!</span><span class="br0">&#40;</span>i<span class="sy0">+</span>n<span class="sy0">,</span>j<span class="sy0">+</span>m<span class="br0">&#41;</span><span class="sy0">|</span>i<span class="sy0">&lt;-</span><span class="br0">&#91;</span>1<span class="sy0">..</span>3<span class="br0">&#93;</span><span class="sy0">,</span>j<span class="sy0">&lt;-</span><span class="br0">&#91;</span>1<span class="sy0">..</span>3<span class="br0">&#93;</span><span class="sy0">,</span>x<span class="sy0">/=</span>i<span class="sy0">+</span>n <span class="sy0">||</span> y<span class="sy0">/=</span>j<span class="sy0">+</span>m<span class="br0">&#93;</span>
&#160;
<span class="co1">-- remove invalid possibilities</span>
remPoss <span class="sy0">::</span> Field <span class="sy0">-&gt;</span> Field
remPoss f <span class="sy0">=</span>array <span class="br0">&#40;</span><span class="br0">&#40;</span>1<span class="sy0">,</span>1<span class="br0">&#41;</span><span class="sy0">,</span><span class="br0">&#40;</span>9<span class="sy0">,</span>9<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">$</span> <span class="kw3">map</span> remPoss' <span class="br0">&#40;</span>assocs f<span class="br0">&#41;</span>
	<span class="kw1">where</span> 
	 others xy<span class="sy0">=</span> <span class="kw3">filter</span> <span class="br0">&#40;</span><span class="sy0">/=</span>0<span class="br0">&#41;</span> <span class="sy0">$</span> row f xy <span class="sy0">++</span> column f xy <span class="sy0">++</span> square f xy
	 remPoss' <span class="sy0">~</span><span class="br0">&#40;</span>i<span class="sy0">,</span><span class="br0">&#40;</span>xs<span class="sy0">,</span>n<span class="br0">&#41;</span><span class="br0">&#41;</span>
		<span class="sy0">|</span> n<span class="sy0">/=</span>0 <span class="sy0">=</span> <span class="kw1">let</span> nxs<span class="sy0">=</span> <span class="kw3">filter</span> <span class="br0">&#40;</span> `<span class="kw3">notElem</span>` others i <span class="br0">&#41;</span> xs <span class="kw1">in</span> <span class="br0">&#40;</span>i<span class="sy0">,</span><span class="br0">&#40;</span>nxs<span class="sy0">,</span><span class="kw3">length</span> <span class="sy0">$</span> <span class="kw3">filter</span> <span class="br0">&#40;</span><span class="sy0">/=</span>0<span class="br0">&#41;</span> nxs<span class="br0">&#41;</span><span class="br0">&#41;</span>
		<span class="sy0">|</span> <span class="kw3">otherwise</span> <span class="sy0">=</span> <span class="br0">&#40;</span>i<span class="sy0">,</span><span class="br0">&#40;</span>xs<span class="sy0">,</span>n<span class="br0">&#41;</span><span class="br0">&#41;</span>
&#160;
<span class="co1">-- remove invalid fields, i.e. contains empty cell without filling possibilities</span>
remInv <span class="sy0">::</span> <span class="br0">&#91;</span>Field<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>Field<span class="br0">&#93;</span>
remInv <span class="sy0">=</span> <span class="kw3">filter</span> <span class="br0">&#40;</span><span class="kw3">all</span> <span class="br0">&#40;</span>\<span class="br0">&#40;</span><span class="sy0">_,</span><span class="br0">&#40;</span>x<span class="sy0">,_</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">-&gt;</span> x<span class="sy0">/=</span><span class="br0">&#91;</span>0<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">.</span>assocs<span class="br0">&#41;</span>
&#160;
&#160;
genMoves <span class="sy0">::</span> <span class="br0">&#40;</span><span class="kw4">Int</span><span class="sy0">,</span><span class="kw4">Int</span><span class="br0">&#41;</span> <span class="sy0">-&gt;</span> Field <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>Field<span class="br0">&#93;</span>
genMoves xy f <span class="sy0">=</span> remInv <span class="sy0">$</span> <span class="kw3">map</span> remPoss <span class="br0">&#91;</span>f <span class="sy0">//</span> <span class="br0">&#91;</span><span class="br0">&#40;</span>xy<span class="sy0">,</span><span class="br0">&#40;</span><span class="br0">&#91;</span>poss<span class="sy0">!!</span>i<span class="br0">&#93;</span><span class="sy0">,</span>0<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="sy0">|</span>i<span class="sy0">&lt;-</span><span class="br0">&#91;</span>0<span class="sy0">..</span>num<span class="sy0">-</span>1<span class="br0">&#93;</span><span class="br0">&#93;</span>
	<span class="kw1">where</span> 
	 poss <span class="sy0">=</span> <span class="kw3">tail</span> <span class="sy0">$</span> <span class="kw3">fst</span> <span class="br0">&#40;</span>f<span class="sy0">!</span>xy<span class="br0">&#41;</span>
	 num <span class="sy0">=</span> <span class="kw3">snd</span> <span class="br0">&#40;</span>f<span class="sy0">!</span>xy<span class="br0">&#41;</span>
&#160;
<span class="co1">--always try the entry with least possibilties first</span>
moves <span class="sy0">::</span> Field <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>Field<span class="br0">&#93;</span>
moves f <span class="sy0">=</span> genMoves bestOne f
	<span class="kw1">where</span>
	 <span class="co1">-- remove all with 0 possibilities, select the one with minimum possibilities</span>
	 bestOne <span class="sy0">=</span><span class="kw3">fst</span> <span class="sy0">$</span> minimumBy <span class="br0">&#40;</span>\<span class="br0">&#40;</span><span class="sy0">_,</span><span class="br0">&#40;</span><span class="sy0">_,</span>n<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="sy0">_,</span><span class="br0">&#40;</span><span class="sy0">_,</span>m<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="kw3">compare</span> n m<span class="br0">&#41;</span> list 
	 list <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw3">filter</span> <span class="br0">&#40;</span>\<span class="br0">&#40;</span><span class="sy0">_,</span><span class="br0">&#40;</span><span class="sy0">_,</span>x<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">-&gt;</span> x<span class="sy0">/=</span>0<span class="br0">&#41;</span><span class="sy0">.</span>assocs<span class="br0">&#41;</span> f<span class="br0">&#41;</span>
&#160;
play <span class="sy0">::</span> <span class="br0">&#91;</span>Field<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> Field
play <span class="br0">&#40;</span>f:a<span class="br0">&#41;</span>
	<span class="sy0">|</span> done f<span class="sy0">=</span> Just f
	<span class="sy0">|</span> <span class="kw3">otherwise</span> <span class="sy0">=</span> play <span class="br0">&#40;</span>moves f<span class="sy0">++</span>a<span class="br0">&#41;</span>
play <span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> Nothing
&#160;
<span class="co1">-- reads a file with puzzles, path as argument</span>
main <span class="sy0">::</span> <span class="kw4">IO</span> <span class="br0">&#40;</span><span class="br0">&#41;</span>
main <span class="sy0">=</span> <span class="kw1">do</span> 
		  path <span class="sy0">&lt;-</span> getArgs
		  inp<span class="sy0">&lt;-</span><span class="kw3">readFile</span> <span class="br0">&#40;</span>path<span class="sy0">!!</span>0<span class="br0">&#41;</span>
		  <span class="kw1">let</span> x<span class="sy0">=</span><span class="kw3">lines</span> inp
		  <span class="kw1">let</span> erg<span class="sy0">=</span><span class="kw3">map</span> <span class="br0">&#40;</span>printField<span class="sy0">.</span>play<span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw3">map</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>\x<span class="sy0">-&gt;</span><span class="br0">&#91;</span>x<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">.</span>remPoss<span class="sy0">.</span>readField<span class="br0">&#41;</span> x<span class="br0">&#41;</span>
		  <span class="kw3">writeFile</span> <span class="st0">&quot;./out.txt&quot;</span> <span class="br0">&#40;</span><span class="kw3">unlines</span> erg<span class="br0">&#41;</span></pre></div></div>
<p>I let it run on the 41747 minimal puzzles. On a 2.66 GHz Intel Xeon it took 15441m1.920s, which is about 22 seconds per puzzle. It could probably be further improved by making remPoss smarter. At the time of writing this the naive version from which I started is crunching for 20 <i>days</i> on a simple puzzle with 32 hints. I'd say that's quite a performance improvement.
</p>
<h2> <span class="mw-headline" id="Constraint_Propagation_.28a_la_Norvig.29">17  Constraint Propagation (a la Norvig) </span></h2>
<p>By Manu
</p><p>This is an Haskell implementation of Peter Norvig's sudoku solver (<a rel="nofollow" class="external free" href="http://norvig.com/sudoku.html">http://norvig.com/sudoku.html</a>). 
It should solve, in a flash, the 95 puzzles found here&#160;: <a rel="nofollow" class="external free" href="http://norvig.com/top95.txt">http://norvig.com/top95.txt</a>
Thanks to Daniel Fischer for helping and refactoring.
</p><p><br />
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="kw1">module</span> Main <span class="kw1">where</span>
&#160;
<span class="kw1">import</span> Data<span class="sy0">.</span>List <span class="kw1">hiding</span> <span class="br0">&#40;</span><span class="kw3">lookup</span><span class="br0">&#41;</span>
<span class="kw1">import</span> Data<span class="sy0">.</span>Array
<span class="kw1">import</span> Control<span class="sy0">.</span><span class="kw4">Monad</span>
<span class="kw1">import</span> Data<span class="sy0">.</span><span class="kw4">Maybe</span>
&#160;
<span class="co1">-- Types</span>
<span class="kw1">type</span> Digit  <span class="sy0">=</span> <span class="kw4">Char</span>
<span class="kw1">type</span> Square <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">Char</span><span class="sy0">,</span><span class="kw4">Char</span><span class="br0">&#41;</span>
<span class="kw1">type</span> Unit   <span class="sy0">=</span> <span class="br0">&#91;</span>Square<span class="br0">&#93;</span>
&#160;
<span class="co1">-- We represent our grid as an array</span>
<span class="kw1">type</span> Grid <span class="sy0">=</span> Array Square <span class="br0">&#91;</span>Digit<span class="br0">&#93;</span>
&#160;
&#160;
<span class="co1">-- Setting Up the Problem</span>
rows <span class="sy0">=</span> <span class="st0">&quot;ABCDEFGHI&quot;</span>
cols <span class="sy0">=</span> <span class="st0">&quot;123456789&quot;</span>
digits <span class="sy0">=</span> <span class="st0">&quot;123456789&quot;</span>
box <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>'A'<span class="sy0">,</span>'1'<span class="br0">&#41;</span><span class="sy0">,</span><span class="br0">&#40;</span>'I'<span class="sy0">,</span>'9'<span class="br0">&#41;</span><span class="br0">&#41;</span>
&#160;
cross <span class="sy0">::</span> <span class="kw4">String</span> <span class="sy0">-&gt;</span> <span class="kw4">String</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>Square<span class="br0">&#93;</span>
cross rows cols <span class="sy0">=</span> <span class="br0">&#91;</span> <span class="br0">&#40;</span>r<span class="sy0">,</span>c<span class="br0">&#41;</span> <span class="sy0">|</span> r <span class="sy0">&lt;-</span> rows<span class="sy0">,</span> c <span class="sy0">&lt;-</span> cols <span class="br0">&#93;</span>
&#160;
squares <span class="sy0">::</span> <span class="br0">&#91;</span>Square<span class="br0">&#93;</span>
squares <span class="sy0">=</span> cross rows cols  <span class="co1">-- [('A','1'),('A','2'),('A','3'),...]</span>
&#160;
peers <span class="sy0">::</span> Array Square <span class="br0">&#91;</span>Square<span class="br0">&#93;</span>
peers <span class="sy0">=</span> array box <span class="br0">&#91;</span><span class="br0">&#40;</span>s<span class="sy0">,</span> set <span class="br0">&#40;</span>units<span class="sy0">!</span>s<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">|</span> s <span class="sy0">&lt;-</span> squares <span class="br0">&#93;</span>
      <span class="kw1">where</span>
        set <span class="sy0">=</span> nub <span class="sy0">.</span> <span class="kw3">concat</span>
&#160;
unitlist <span class="sy0">::</span> <span class="br0">&#91;</span>Unit<span class="br0">&#93;</span>
unitlist <span class="sy0">=</span> <span class="br0">&#91;</span> cross rows <span class="br0">&#91;</span>c<span class="br0">&#93;</span> <span class="sy0">|</span> c <span class="sy0">&lt;-</span> cols <span class="br0">&#93;</span> <span class="sy0">++</span>
            <span class="br0">&#91;</span> cross <span class="br0">&#91;</span>r<span class="br0">&#93;</span> cols <span class="sy0">|</span> r <span class="sy0">&lt;-</span> rows <span class="br0">&#93;</span> <span class="sy0">++</span>
            <span class="br0">&#91;</span> cross rs cs <span class="sy0">|</span> rs <span class="sy0">&lt;-</span> <span class="br0">&#91;</span><span class="st0">&quot;ABC&quot;</span><span class="sy0">,</span><span class="st0">&quot;DEF&quot;</span><span class="sy0">,</span><span class="st0">&quot;GHI&quot;</span><span class="br0">&#93;</span><span class="sy0">,</span> 
                            cs <span class="sy0">&lt;-</span> <span class="br0">&#91;</span><span class="st0">&quot;123&quot;</span><span class="sy0">,</span><span class="st0">&quot;456&quot;</span><span class="sy0">,</span><span class="st0">&quot;789&quot;</span><span class="br0">&#93;</span><span class="br0">&#93;</span>
&#160;
<span class="co1">-- this could still be done more efficiently, but what the heck...</span>
units <span class="sy0">::</span> Array Square <span class="br0">&#91;</span>Unit<span class="br0">&#93;</span>
units <span class="sy0">=</span> array box <span class="br0">&#91;</span><span class="br0">&#40;</span>s<span class="sy0">,</span> <span class="br0">&#91;</span><span class="kw3">filter</span> <span class="br0">&#40;</span><span class="sy0">/=</span> s<span class="br0">&#41;</span> u <span class="sy0">|</span> u <span class="sy0">&lt;-</span> unitlist<span class="sy0">,</span> s `<span class="kw3">elem</span>` u <span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy0">|</span> 
                    s <span class="sy0">&lt;-</span> squares<span class="br0">&#93;</span>
&#160;
&#160;
allPossibilities <span class="sy0">::</span> Grid
allPossibilities <span class="sy0">=</span> array box <span class="br0">&#91;</span> <span class="br0">&#40;</span>s<span class="sy0">,</span>digits<span class="br0">&#41;</span> <span class="sy0">|</span> s <span class="sy0">&lt;-</span> squares <span class="br0">&#93;</span>
&#160;
<span class="co1">-- Parsing a grid into an Array</span>
parsegrid     <span class="sy0">::</span> <span class="kw4">String</span> <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> Grid
parsegrid g    <span class="sy0">=</span> <span class="kw1">do</span> regularGrid g
                    foldM assign allPossibilities <span class="br0">&#40;</span><span class="kw3">zip</span> squares g<span class="br0">&#41;</span>
&#160;
   <span class="kw1">where</span>  regularGrid   <span class="sy0">::</span> <span class="kw4">String</span> <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> <span class="kw4">String</span>
          regularGrid g  <span class="sy0">=</span> <span class="kw1">if</span> <span class="kw3">all</span> <span class="br0">&#40;</span>`<span class="kw3">elem</span>` <span class="st0">&quot;0.-123456789&quot;</span><span class="br0">&#41;</span> g
                              <span class="kw1">then</span> Just g
                              <span class="kw1">else</span> Nothing
&#160;
<span class="co1">-- Propagating Constraints</span>
assign        <span class="sy0">::</span> Grid <span class="sy0">-&gt;</span> <span class="br0">&#40;</span>Square<span class="sy0">,</span> Digit<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> Grid
assign g <span class="br0">&#40;</span>s<span class="sy0">,</span>d<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw1">if</span> d `<span class="kw3">elem</span>` digits
                 <span class="co1">-- check that we are assigning a digit and not a '.'</span>
                  <span class="kw1">then</span> <span class="kw1">do</span>
                    <span class="kw1">let</span> ds <span class="sy0">=</span> g <span class="sy0">!</span> s
                        toDump <span class="sy0">=</span> delete d ds
                    foldM eliminate g <span class="br0">&#40;</span><span class="kw3">zip</span> <span class="br0">&#40;</span><span class="kw3">repeat</span> s<span class="br0">&#41;</span> toDump<span class="br0">&#41;</span>
                  <span class="kw1">else</span> <span class="kw3">return</span> g
&#160;
eliminate     <span class="sy0">::</span>  Grid <span class="sy0">-&gt;</span> <span class="br0">&#40;</span>Square<span class="sy0">,</span> Digit<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> Grid
eliminate g <span class="br0">&#40;</span>s<span class="sy0">,</span>d<span class="br0">&#41;</span> <span class="sy0">=</span> 
  <span class="kw1">let</span> cell <span class="sy0">=</span> g <span class="sy0">!</span> s <span class="kw1">in</span>
  <span class="kw1">if</span> d `<span class="kw3">notElem</span>` cell <span class="kw1">then</span> <span class="kw3">return</span> g <span class="co1">-- already eliminated</span>
  <span class="co1">-- else d is deleted from s' values</span>
    <span class="kw1">else</span> <span class="kw1">do</span> <span class="kw1">let</span> newCell <span class="sy0">=</span> delete d cell
                newV <span class="sy0">=</span> g <span class="sy0">//</span> <span class="br0">&#91;</span><span class="br0">&#40;</span>s<span class="sy0">,</span>newCell<span class="br0">&#41;</span><span class="br0">&#93;</span>
            newV2 <span class="sy0">&lt;-</span> <span class="kw1">case</span> newCell <span class="kw1">of</span>
            <span class="co1">-- contradiction&#160;: Nothing terminates the computation</span>
                 <span class="br0">&#91;</span><span class="br0">&#93;</span>   <span class="sy0">-&gt;</span> Nothing
            <span class="co1">-- if there is only one value left in s, remove it from peers</span>
                 <span class="br0">&#91;</span>d'<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="kw1">do</span> <span class="kw1">let</span> peersOfS <span class="sy0">=</span> peers <span class="sy0">!</span> s
                            foldM eliminate newV <span class="br0">&#40;</span><span class="kw3">zip</span> peersOfS <span class="br0">&#40;</span><span class="kw3">repeat</span> d'<span class="br0">&#41;</span><span class="br0">&#41;</span>
            <span class="co1">-- else&#160;: return the new grid</span>
                 <span class="sy0">_</span>    <span class="sy0">-&gt;</span> <span class="kw3">return</span> newV
            <span class="co1">-- Now check the places where d appears in the peers of s</span>
            foldM <span class="br0">&#40;</span>locate d<span class="br0">&#41;</span> newV2 <span class="br0">&#40;</span>units <span class="sy0">!</span> s<span class="br0">&#41;</span>
&#160;
locate <span class="sy0">::</span> Digit <span class="sy0">-&gt;</span> Grid <span class="sy0">-&gt;</span> Unit <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> Grid
locate d g u <span class="sy0">=</span> <span class="kw1">case</span> <span class="kw3">filter</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>d `<span class="kw3">elem</span>`<span class="br0">&#41;</span> <span class="sy0">.</span> <span class="br0">&#40;</span>g <span class="sy0">!</span><span class="br0">&#41;</span><span class="br0">&#41;</span> u <span class="kw1">of</span>
                <span class="br0">&#91;</span><span class="br0">&#93;</span>  <span class="sy0">-&gt;</span> Nothing
                <span class="br0">&#91;</span>s<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> assign g <span class="br0">&#40;</span>s<span class="sy0">,</span>d<span class="br0">&#41;</span>
                <span class="sy0">_</span>   <span class="sy0">-&gt;</span> <span class="kw3">return</span> g
&#160;
<span class="co1">-- Search</span>
search <span class="sy0">::</span> Grid <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> Grid
search g <span class="sy0">=</span> 
  <span class="kw1">case</span> <span class="br0">&#91;</span><span class="br0">&#40;</span>l<span class="sy0">,</span><span class="br0">&#40;</span>s<span class="sy0">,</span>xs<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>s<span class="sy0">,</span>xs<span class="br0">&#41;</span> <span class="sy0">&lt;-</span> assocs g<span class="sy0">,</span> <span class="kw1">let</span> l <span class="sy0">=</span> <span class="kw3">length</span> xs<span class="sy0">,</span> l <span class="sy0">/=</span> 1<span class="br0">&#93;</span> <span class="kw1">of</span>
            <span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="kw3">return</span> g
            ls <span class="sy0">-&gt;</span> <span class="kw1">do</span> <span class="kw1">let</span> <span class="br0">&#40;</span><span class="sy0">_,</span><span class="br0">&#40;</span>s<span class="sy0">,</span>ds<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw3">minimum</span> ls
                     msum <span class="br0">&#91;</span>assign g <span class="br0">&#40;</span>s<span class="sy0">,</span>d<span class="br0">&#41;</span> <span class="sy0">&gt;&gt;=</span> search <span class="sy0">|</span> d <span class="sy0">&lt;-</span> ds<span class="br0">&#93;</span>
&#160;
solve <span class="sy0">::</span> <span class="kw4">String</span> <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> Grid
solve str <span class="sy0">=</span> <span class="kw1">do</span>
    grd <span class="sy0">&lt;-</span> parsegrid str
    search grd
&#160;
<span class="co1">-- Display solved grid</span>
printGrid <span class="sy0">::</span> Grid <span class="sy0">-&gt;</span> <span class="kw4">IO</span> <span class="br0">&#40;</span><span class="br0">&#41;</span>
printGrid <span class="sy0">=</span> <span class="kw3">putStrLn</span> <span class="sy0">.</span> gridToString
&#160;
gridToString <span class="sy0">::</span> Grid <span class="sy0">-&gt;</span> <span class="kw4">String</span>
gridToString g <span class="sy0">=</span>
  <span class="kw1">let</span> l0 <span class="sy0">=</span> elems g
      <span class="co1">-- [(&quot;1537&quot;),(&quot;4&quot;),...]   </span>
      l1 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw3">map</span> <span class="br0">&#40;</span>\s <span class="sy0">-&gt;</span> <span class="st0">&quot; &quot;</span> <span class="sy0">++</span> s <span class="sy0">++</span> <span class="st0">&quot; &quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> l0
      <span class="co1">-- [&quot;1 &quot;,&quot; 2 &quot;,...] </span>
      l2 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw3">map</span> <span class="kw3">concat</span> <span class="sy0">.</span> sublist <span class="nu0">3</span><span class="br0">&#41;</span> l1
      <span class="co1">-- [&quot;1  2  3 &quot;,&quot; 4  5  6 &quot;, ...]</span>
      l3 <span class="sy0">=</span> <span class="br0">&#40;</span>sublist <span class="nu0">3</span><span class="br0">&#41;</span> l2
      <span class="co1">-- [[&quot;1  2  3 &quot;,&quot; 4  5  6 &quot;,&quot; 7  8  9 &quot;],...] </span>
      l4 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw3">map</span> <span class="br0">&#40;</span><span class="kw3">concat</span> <span class="sy0">.</span> intersperse <span class="st0">&quot;|&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> l3
      <span class="co1">-- [&quot;1  2  3 | 4  5  6 | 7  8  9 &quot;,...]</span>
      l5 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw3">concat</span> <span class="sy0">.</span> intersperse <span class="br0">&#91;</span>line<span class="br0">&#93;</span> <span class="sy0">.</span> sublist 3<span class="br0">&#41;</span> l4
  <span class="kw1">in</span> <span class="kw3">unlines</span> l5 
     <span class="kw1">where</span> sublist n <span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
           sublist n xs <span class="sy0">=</span> ys&#160;: sublist n zs
             <span class="kw1">where</span> <span class="br0">&#40;</span>ys<span class="sy0">,</span>zs<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw3">splitAt</span> n xs
           line <span class="sy0">=</span> hyphens <span class="sy0">++</span> <span class="st0">&quot;+&quot;</span> <span class="sy0">++</span> hyphens <span class="sy0">++</span> <span class="st0">&quot;+&quot;</span> <span class="sy0">++</span> hyphens
           hyphens <span class="sy0">=</span> replicate 9 '<span class="sy0">-</span>'
&#160;
main <span class="sy0">::</span> <span class="kw4">IO</span> <span class="br0">&#40;</span><span class="br0">&#41;</span>
main <span class="sy0">=</span> <span class="kw1">do</span>
    grids <span class="sy0">&lt;-</span> <span class="kw3">fmap</span> <span class="kw3">lines</span> <span class="sy0">$</span> <span class="kw3">readFile</span> <span class="st0">&quot;top95.txt&quot;</span>
    <span class="kw3">mapM_</span> printGrid <span class="sy0">$</span> mapMaybe solve grids</pre></div></div>
<h2> <span class="mw-headline" id="Concurrent_STM_Solver">18  Concurrent STM Solver </span></h2>
<p><a href="/haskellwiki/index.php?title=Liyang&amp;action=edit&amp;redlink=1" class="new" title="Liyang (page does not exist)">Liyang</a> wrote some <a href="/haskellwiki/Liyang/sudoku.hs" title="Liyang/sudoku.hs">applicative functor porn utilising STM</a>. It's pretty but slow. Suggestions for speeding it up would be very welcome.
</p>
<h2> <span class="mw-headline" id="Chaining_style_Solver">19  Chaining style Solver </span></h2>
<pre> by jinjing
</pre>
<p>It uses <a rel="nofollow" class="external text" href="http://github.com/nfjinjing/projectt/tree/master/T/Snippets.hs">some snippets</a> and the <a rel="nofollow" class="external text" href="http://github.com/nfjinjing/projectt/tree/master/T/Hack/Dot.hs">dot hack</a>
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="kw1">import</span> <span class="kw2">Prelude</span> <span class="kw1">hiding</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="sy0">.</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">import</span> T<span class="sy0">.</span>T
<span class="kw1">import</span> List
<span class="kw1">import</span> Data<span class="sy0">.</span><span class="kw4">Maybe</span>
<span class="kw1">import</span> Data<span class="sy0">.</span><span class="kw4">Char</span>
<span class="kw1">import</span> Data<span class="sy0">.</span>Map<span class="br0">&#40;</span>keys<span class="sy0">,</span> elems<span class="br0">&#41;</span>
<span class="kw1">import</span> <span class="kw1">qualified</span> Data<span class="sy0">.</span>Map <span class="kw1">as</span> Map
&#160;
row i <span class="sy0">=</span> i `<span class="kw3">div</span>` 9
col i <span class="sy0">=</span> i `<span class="kw3">mod</span>` 9
row<span class="sy0">_</span>list i positions <span class="sy0">=</span> positions<span class="sy0">.</span>select<span class="br0">&#40;</span>on<span class="sy0">_</span>i<span class="sy0">_</span>row<span class="br0">&#41;</span> <span class="kw1">where</span>
  on<span class="sy0">_</span>i<span class="sy0">_</span>row pos <span class="sy0">=</span> pos<span class="sy0">.</span>row  <span class="sy0">==</span> i<span class="sy0">.</span>row
col<span class="sy0">_</span>list i positions <span class="sy0">=</span> positions<span class="sy0">.</span>select<span class="br0">&#40;</span>on<span class="sy0">_</span>i<span class="sy0">_</span>col<span class="br0">&#41;</span> <span class="kw1">where</span>
  on<span class="sy0">_</span>i<span class="sy0">_</span>col pos <span class="sy0">=</span> pos<span class="sy0">.</span>col <span class="sy0">==</span> i<span class="sy0">.</span>col
&#160;
grid<span class="sy0">_</span>list i positions <span class="sy0">=</span> positions<span class="sy0">.</span>select<span class="br0">&#40;</span>on<span class="sy0">_</span>same<span class="sy0">_</span>grid i<span class="br0">&#41;</span>
&#160;
on<span class="sy0">_</span>same<span class="sy0">_</span>grid i j <span class="sy0">=</span> on<span class="sy0">_</span>same<span class="sy0">_</span>row<span class="sy0">_</span>grid i j <span class="sy0">&amp;&amp;</span> on<span class="sy0">_</span>same<span class="sy0">_</span>col<span class="sy0">_</span>grid i j
&#160;
on<span class="sy0">_</span>same<span class="sy0">_</span>row<span class="sy0">_</span>grid i j <span class="sy0">=</span> <span class="br0">&#40;</span> i<span class="sy0">.</span>row<span class="sy0">.</span><span class="kw3">mod</span><span class="sy0">.</span>send<span class="sy0">_</span>to<span class="br0">&#40;</span>3<span class="br0">&#41;</span> <span class="sy0">-</span> j<span class="sy0">.</span>row<span class="sy0">.</span><span class="kw3">mod</span><span class="sy0">.</span>send<span class="sy0">_</span>to<span class="br0">&#40;</span>3<span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="sy0">==</span> i<span class="sy0">.</span>row <span class="sy0">-</span> j<span class="sy0">.</span>row
on<span class="sy0">_</span>same<span class="sy0">_</span>col<span class="sy0">_</span>grid i j <span class="sy0">=</span> <span class="br0">&#40;</span> i<span class="sy0">.</span>col<span class="sy0">.</span><span class="kw3">mod</span><span class="sy0">.</span>send<span class="sy0">_</span>to<span class="br0">&#40;</span>3<span class="br0">&#41;</span> <span class="sy0">-</span> j<span class="sy0">.</span>col<span class="sy0">.</span><span class="kw3">mod</span><span class="sy0">.</span>send<span class="sy0">_</span>to<span class="br0">&#40;</span>3<span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="sy0">==</span> i<span class="sy0">.</span>col <span class="sy0">-</span> j<span class="sy0">.</span>col
&#160;
board <span class="sy0">=</span> 0<span class="sy0">.</span>upto 80
choices <span class="sy0">=</span> 1<span class="sy0">.</span>upto 9
&#160;
related i positions <span class="sy0">=</span> 
  positions<span class="sy0">.</span>row<span class="sy0">_</span>list<span class="br0">&#40;</span>i<span class="br0">&#41;</span> <span class="sy0">++</span> positions<span class="sy0">.</span>col<span class="sy0">_</span>list<span class="br0">&#40;</span>i<span class="br0">&#41;</span> <span class="sy0">++</span> positions<span class="sy0">.</span>grid<span class="sy0">_</span>list<span class="br0">&#40;</span>i<span class="br0">&#41;</span>
values moves positions <span class="sy0">=</span> positions<span class="sy0">.</span>mapMaybe <span class="br0">&#40;</span>moves<span class="sy0">.</span>let<span class="sy0">_</span>receive Map<span class="sy0">.</span><span class="kw3">lookup</span><span class="br0">&#41;</span>
&#160;
possible<span class="sy0">_</span>moves i moves <span class="sy0">=</span> 
  <span class="kw1">let</span> positions <span class="sy0">=</span> moves<span class="sy0">.</span>keys <span class="kw1">in</span>
    choices \\ positions<span class="sy0">.</span>related<span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy0">.</span>values<span class="br0">&#40;</span>moves<span class="br0">&#41;</span>
&#160;
sudoku<span class="sy0">_</span>move moves <span class="sy0">=</span> 
  <span class="kw1">let</span> i <span class="sy0">=</span> moves<span class="sy0">.</span>next<span class="sy0">_</span>pos <span class="kw1">in</span>
    moves<span class="sy0">.</span>possible<span class="sy0">_</span>moves<span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy0">.</span><span class="kw3">map</span><span class="br0">&#40;</span>Map<span class="sy0">.</span>insert i<span class="br0">&#41;</span><span class="sy0">.</span>map<span class="sy0">_</span>send<span class="sy0">_</span>to<span class="br0">&#40;</span>moves<span class="br0">&#41;</span>
&#160;
next<span class="sy0">_</span>pos moves <span class="sy0">=</span> <span class="br0">&#40;</span>board \\ moves<span class="sy0">.</span>keys<span class="br0">&#41;</span>
  <span class="sy0">.</span>label<span class="sy0">_</span>by<span class="br0">&#40;</span>choice<span class="sy0">_</span>size<span class="br0">&#41;</span><span class="sy0">.</span>sort<span class="sy0">.</span>first<span class="sy0">.</span><span class="kw3">snd</span> <span class="kw1">where</span>
    choice<span class="sy0">_</span>size i <span class="sy0">=</span> moves<span class="sy0">.</span>possible<span class="sy0">_</span>moves<span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy0">.</span><span class="kw3">length</span>
&#160;
solve solutions 0 <span class="sy0">=</span> solutions
solve solutions n <span class="sy0">=</span> solve next<span class="sy0">_</span>solutions <span class="br0">&#40;</span>n<span class="sy0">-</span>1<span class="br0">&#41;</span> <span class="kw1">where</span>
  next<span class="sy0">_</span>solutions <span class="sy0">=</span> solutions<span class="sy0">.</span><span class="kw3">map</span><span class="br0">&#40;</span>sudoku<span class="sy0">_</span>move<span class="br0">&#41;</span><span class="sy0">.</span><span class="kw3">concat</span>
&#160;
parse<span class="sy0">_</span>input line <span class="sy0">=</span> line<span class="sy0">.</span><span class="kw3">words</span><span class="sy0">.</span>join<span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span>
  <span class="sy0">.</span><span class="kw3">map</span><span class="br0">&#40;</span>\c <span class="sy0">-&gt;</span> <span class="kw1">if</span> '1' <span class="sy0">&lt;=</span> c <span class="sy0">&amp;&amp;</span> c <span class="sy0">&lt;=</span> '9' <span class="kw1">then</span> c <span class="kw1">else</span> '0'<span class="br0">&#41;</span>
  <span class="sy0">.</span><span class="kw3">map</span><span class="br0">&#40;</span>digitToInt<span class="br0">&#41;</span><span class="sy0">.</span><span class="kw3">zip</span><span class="br0">&#40;</span><span class="br0">&#91;</span>0<span class="sy0">..</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">.</span>reject<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="sy0">==</span>0<span class="br0">&#41;</span><span class="sy0">.</span><span class="kw3">snd</span><span class="br0">&#41;</span><span class="sy0">.</span>Map<span class="sy0">.</span>fromList
&#160;
pretty<span class="sy0">_</span>output solution <span class="sy0">=</span> solution<span class="sy0">.</span>elems<span class="sy0">.</span><span class="kw3">map</span><span class="br0">&#40;</span><span class="kw3">show</span><span class="br0">&#41;</span><span class="sy0">.</span>in<span class="sy0">_</span>group<span class="sy0">_</span>of<span class="br0">&#40;</span>9<span class="br0">&#41;</span>
  <span class="sy0">.</span><span class="kw3">map</span><span class="br0">&#40;</span><span class="kw3">unwords</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="kw3">unlines</span>
&#160;
sudoku line <span class="sy0">=</span> solve <span class="br0">&#91;</span>given<span class="br0">&#93;</span> <span class="br0">&#40;</span>81 <span class="sy0">-</span> given<span class="sy0">.</span>Map<span class="sy0">.</span>size<span class="br0">&#41;</span><span class="sy0">.</span>first<span class="sy0">.</span>pretty<span class="sy0">_</span>output
  <span class="kw1">where</span> given <span class="sy0">=</span> parse<span class="sy0">_</span>input line</pre></div></div>
<h2> <span class="mw-headline" id="Finite_Domain_Constraint_Solver">20  Finite Domain Constraint Solver </span></h2>
<p>by David Overton
</p><p>This solver uses a finite domain constraint solver monad described <a rel="nofollow" class="external text" href="http://overtond.blogspot.com/2008/07/pre.html">here</a>.
The core functions are shown below.  A full explanation is <a rel="nofollow" class="external text" href="http://overtond.blogspot.com/2008/07/haskell-sudoku-solver-using-finite.html">here</a>.
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="kw1">type</span> Puzzle <span class="sy0">=</span> <span class="br0">&#91;</span><span class="kw4">Int</span><span class="br0">&#93;</span>
&#160;
sudoku <span class="sy0">::</span> Puzzle <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>Puzzle<span class="br0">&#93;</span>
sudoku puzzle <span class="sy0">=</span> runFD <span class="sy0">$</span> <span class="kw1">do</span>
    vars <span class="sy0">&lt;-</span> newVars 81 <span class="br0">&#91;</span>1<span class="sy0">..</span>9<span class="br0">&#93;</span>
    zipWithM<span class="sy0">_</span> <span class="br0">&#40;</span>\x n <span class="sy0">-&gt;</span> when <span class="br0">&#40;</span>n <span class="sy0">&gt;</span> 0<span class="br0">&#41;</span> <span class="br0">&#40;</span>x `hasValue` n<span class="br0">&#41;</span><span class="br0">&#41;</span> vars puzzle
    <span class="kw3">mapM_</span> allDifferent <span class="br0">&#40;</span>rows vars<span class="br0">&#41;</span>
    <span class="kw3">mapM_</span> allDifferent <span class="br0">&#40;</span>columns vars<span class="br0">&#41;</span>
    <span class="kw3">mapM_</span> allDifferent <span class="br0">&#40;</span>boxes vars<span class="br0">&#41;</span>
    labelling vars
&#160;
rows<span class="sy0">,</span> columns<span class="sy0">,</span> boxes <span class="sy0">::</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="br0">&#91;</span>a<span class="br0">&#93;</span><span class="br0">&#93;</span>
rows <span class="sy0">=</span> chunk 9
columns <span class="sy0">=</span> transpose <span class="sy0">.</span> rows
boxes <span class="sy0">=</span> <span class="kw3">concatMap</span> <span class="br0">&#40;</span><span class="kw3">map</span> <span class="kw3">concat</span> <span class="sy0">.</span> transpose<span class="br0">&#41;</span> <span class="sy0">.</span> chunk 3 <span class="sy0">.</span> chunk 3 <span class="sy0">.</span> chunk 3
&#160;
chunk <span class="sy0">::</span> <span class="kw4">Int</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="br0">&#91;</span>a<span class="br0">&#93;</span><span class="br0">&#93;</span>
chunk <span class="sy0">_</span> <span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
chunk n xs <span class="sy0">=</span> ys&#160;: chunk n zs <span class="kw1">where</span>
    <span class="br0">&#40;</span>ys<span class="sy0">,</span> zs<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw3">splitAt</span> n xs</pre></div></div>
<h2> <span class="mw-headline" id="Very_fast_Solver">21  Very fast Solver </span></h2>
<p>by Frank Kuehnel
</p><p>This solver implements constraint propagation with higher level logic
and search. Solves the 49151 puzzles with 17 hints in less than 50 seconds!
More detail and less optimized versions are
<a rel="nofollow" class="external text" href="http://zufaellige-reflektion.blogspot.com/2011/01/sudoku-puzzels-revisited.html">here</a>.
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="kw1">module</span> Main <span class="kw1">where</span>
&#160;
<span class="kw1">import</span> <span class="kw1">qualified</span> Data<span class="sy0">.</span>Vector<span class="sy0">.</span>Unboxed <span class="kw1">as</span> V
<span class="kw1">import</span> <span class="kw1">qualified</span> Data<span class="sy0">.</span>Vector <span class="kw1">as</span> BV <span class="br0">&#40;</span>generate<span class="sy0">,</span><span class="br0">&#40;</span><span class="sy0">!</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">import</span> Data<span class="sy0">.</span>List <span class="br0">&#40;</span><span class="kw3">foldl</span>'<span class="sy0">,</span>sort<span class="sy0">,</span>group<span class="br0">&#41;</span>
<span class="kw1">import</span> Data<span class="sy0">.</span><span class="kw4">Char</span> <span class="br0">&#40;</span>chr<span class="sy0">,</span> ord<span class="br0">&#41;</span>
<span class="kw1">import</span> Data<span class="sy0">.</span>Word
<span class="kw1">import</span> Data<span class="sy0">.</span>Bits
<span class="kw1">import</span> Control<span class="sy0">.</span><span class="kw4">Monad</span>
<span class="kw1">import</span> Data<span class="sy0">.</span><span class="kw4">Maybe</span>
<span class="kw1">import</span> System <span class="br0">&#40;</span>getArgs<span class="br0">&#41;</span>
&#160;
<span class="co1">-- Types</span>
<span class="kw1">type</span> Alphabet   <span class="sy0">=</span> Word8
<span class="kw1">type</span> Hypothesis <span class="sy0">=</span> Word32
&#160;
<span class="co1">-- Hypotheses space is a matrix of independed hypoteses</span>
<span class="kw1">type</span> HypothesesSpace    <span class="sy0">=</span> V<span class="sy0">.</span>Vector Hypothesis
&#160;
<span class="co1">-- Set up spatial transformers / discriminators to reflect the spatial</span>
<span class="co1">-- properties of a Sudoku puzzle</span>
ncells <span class="sy0">=</span> <span class="nu0">81</span>
&#160;
<span class="co1">-- vector rearrangement functions</span>
rows        <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> HypothesesSpace
rows        <span class="sy0">=</span> <span class="kw3">id</span>
&#160;
columns     <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> HypothesesSpace
columns vec <span class="sy0">=</span> V<span class="sy0">.</span><span class="kw3">map</span> <span class="br0">&#40;</span>\cidx <span class="sy0">-&gt;</span> vec `V<span class="sy0">.</span>unsafeIndex` cidx<span class="br0">&#41;</span> cIndices
            <span class="kw1">where</span> cIndices <span class="sy0">=</span> V<span class="sy0">.</span>fromList <span class="br0">&#91;</span>r<span class="sy0">*</span>9 <span class="sy0">+</span> c <span class="sy0">|</span> c <span class="sy0">&lt;-</span><span class="br0">&#91;</span>0<span class="sy0">..</span>8<span class="br0">&#93;</span><span class="sy0">,</span> r<span class="sy0">&lt;-</span><span class="br0">&#91;</span>0<span class="sy0">..</span>8<span class="br0">&#93;</span><span class="br0">&#93;</span>
&#160;
subGrids    <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> HypothesesSpace
subGrids vec<span class="sy0">=</span> V<span class="sy0">.</span><span class="kw3">map</span> <span class="br0">&#40;</span>\idx <span class="sy0">-&gt;</span> vec `V<span class="sy0">.</span>unsafeIndex` idx<span class="br0">&#41;</span> sgIndices
            <span class="kw1">where</span> sgIndices <span class="sy0">=</span> V<span class="sy0">.</span>fromList <span class="br0">&#91;</span>i <span class="sy0">+</span> bc <span class="sy0">+</span> br <span class="sy0">|</span> br <span class="sy0">&lt;-</span> <span class="br0">&#91;</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">27</span><span class="sy0">,</span><span class="nu0">54</span><span class="br0">&#93;</span><span class="sy0">,</span> bc <span class="sy0">&lt;-</span> <span class="br0">&#91;</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">6</span><span class="br0">&#93;</span><span class="sy0">,</span> i<span class="sy0">&lt;-</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">9</span><span class="sy0">,</span><span class="nu0">10</span><span class="sy0">,</span><span class="nu0">11</span><span class="sy0">,</span><span class="nu0">18</span><span class="sy0">,</span><span class="nu0">19</span><span class="sy0">,</span><span class="nu0">20</span><span class="br0">&#93;</span><span class="br0">&#93;</span>
&#160;
<span class="co1">-- needs to be boxed, because vector elements are not primitives</span>
peersDiscriminators <span class="sy0">=</span> BV<span class="sy0">.</span>generate ncells discriminator
        <span class="kw1">where</span>
            discriminator idx1 <span class="sy0">=</span> V<span class="sy0">.</span><span class="kw3">zipWith3</span> <span class="br0">&#40;</span>\r c s <span class="sy0">-&gt;</span> <span class="br0">&#40;</span>r <span class="sy0">||</span> c <span class="sy0">||</span> s<span class="br0">&#41;</span><span class="br0">&#41;</span> rDscr cDscr sDscr
                <span class="kw1">where</span>
                    rDscr <span class="sy0">=</span> V<span class="sy0">.</span>generate ncells <span class="br0">&#40;</span>\idx2 <span class="sy0">-&gt;</span> idx1 `<span class="kw3">div</span>` 9 <span class="sy0">==</span> idx2 `<span class="kw3">div</span>` 9<span class="br0">&#41;</span>
                    cDscr <span class="sy0">=</span> V<span class="sy0">.</span>generate ncells <span class="br0">&#40;</span>\idx2 <span class="sy0">-&gt;</span> idx1 `<span class="kw3">mod</span>` 9 <span class="sy0">==</span> idx2 `<span class="kw3">mod</span>` 9<span class="br0">&#41;</span>
                    sDscr <span class="sy0">=</span> V<span class="sy0">.</span>generate ncells <span class="br0">&#40;</span>\idx2 <span class="sy0">-&gt;</span> subGridOfidx1 <span class="sy0">==</span> subGrid idx2<span class="br0">&#41;</span>
                        <span class="kw1">where</span>
                            subGridOfidx1 <span class="sy0">=</span> subGrid idx1
                            subGrid idx <span class="sy0">=</span> <span class="br0">&#40;</span>idx `<span class="kw3">div</span>` 27<span class="sy0">,</span> <span class="br0">&#40;</span>idx `<span class="kw3">div</span>` 3<span class="br0">&#41;</span> `<span class="kw3">mod</span>` <span class="nu0">3</span><span class="br0">&#41;</span>
&#160;
<span class="co1">-- Let's implement the logic</span>
&#160;
<span class="co1">-- Level 0 logic (enforce consistency):</span>
<span class="co1">-- We can't have multiple same solutions in a peer unit,</span>
<span class="co1">-- eliminate solutions from other hypotheses</span>
enforceConsistency <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> HypothesesSpace
enforceConsistency hypS0 <span class="sy0">=</span> <span class="kw1">do</span>
        V<span class="sy0">.</span>foldM solutionReduce hypS0 <span class="sy0">$</span> V<span class="sy0">.</span>findIndices newSingle hypS0
&#160;
solutionReduce <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> <span class="kw4">Int</span> <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> HypothesesSpace
solutionReduce hypS0 idx <span class="sy0">=</span>
        <span class="kw1">let</span> sol     <span class="sy0">=</span> hypS0 V<span class="sy0">.!</span> idx
            peers   <span class="sy0">=</span> peersDiscriminators BV<span class="sy0">.!</span> idx
            hypS1   <span class="sy0">=</span> V<span class="sy0">.</span><span class="kw3">zipWith</span> reduceInUnit peers hypS0
                <span class="kw1">where</span>
                    reduceInUnit p h
                                <span class="sy0">|</span> p <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>h <span class="sy0">==</span> sol<span class="br0">&#41;</span>   <span class="sy0">=</span> setSolution sol
                                <span class="sy0">|</span> p                 <span class="sy0">=</span> h `minus` sol
                                <span class="sy0">|</span> <span class="kw3">otherwise</span>         <span class="sy0">=</span> h
        <span class="kw1">in</span> <span class="kw1">if</span> V<span class="sy0">.</span><span class="kw3">any</span> empty hypS1
            <span class="kw1">then</span> <span class="kw3">return</span> hypS1
            <span class="kw1">else</span> <span class="kw1">if</span> V<span class="sy0">.</span><span class="kw3">any</span> newSingle hypS1
                    <span class="kw1">then</span> enforceConsistency hypS1 <span class="co1">-- constraint propagation</span>
                    <span class="kw1">else</span> <span class="kw3">return</span> hypS1
&#160;
<span class="co1">-- Level 1 logic is rather simple:</span>
<span class="co1">-- We tally up all unknown values in a given unit,</span>
<span class="co1">-- if a value occurs only once, then it must be the solution!</span>
localizeSingles <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> HypothesesSpace
localizeSingles unit <span class="sy0">=</span> <span class="kw1">let</span> known <span class="sy0">=</span> maskChoices <span class="sy0">$</span> accumTally <span class="sy0">$</span> V<span class="sy0">.</span><span class="kw3">filter</span> single unit
        <span class="kw1">in</span> <span class="kw1">if</span> dups known
            <span class="kw1">then</span> Nothing
            <span class="kw1">else</span>
                <span class="kw1">case</span> <span class="br0">&#40;</span>filterSingles <span class="sy0">$</span> accumTally <span class="sy0">$</span> V<span class="sy0">.</span><span class="kw3">filter</span> <span class="br0">&#40;</span><span class="kw3">not</span> <span class="sy0">.</span> single<span class="br0">&#41;</span> unit<span class="br0">&#41;</span> `minus` known <span class="kw1">of</span>
                    0       <span class="sy0">-&gt;</span> <span class="kw3">return</span> unit
                    sl      <span class="sy0">-&gt;</span> <span class="kw3">return</span> <span class="sy0">$</span> replaceWith unit sl
                        <span class="kw1">where</span>
                            replaceWith <span class="sy0">::</span> V<span class="sy0">.</span>Vector Hypothesis <span class="sy0">-&gt;</span> Hypothesis <span class="sy0">-&gt;</span> V<span class="sy0">.</span>Vector Hypothesis
                            replaceWith unit s <span class="sy0">=</span> V<span class="sy0">.</span><span class="kw3">map</span> <span class="br0">&#40;</span>\u <span class="sy0">-&gt;</span> <span class="kw1">if</span> 0 <span class="sy0">/=</span> maskChoices <span class="br0">&#40;</span>s <span class="sy0">.</span>&amp;<span class="sy0">.</span> u<span class="br0">&#41;</span> <span class="kw1">then</span> s `Main<span class="sy0">.</span>intersect` u <span class="kw1">else</span> u<span class="br0">&#41;</span> unit
&#160;
<span class="co1">-- Level 2 logic is a bit more complicated:</span>
<span class="co1">-- Say in a given unit, we find exactly two places with the hypothesis {1,9}.</span>
<span class="co1">-- Then obviously, the value 1 and 9 can only occur in those two places.</span>
<span class="co1">-- All other ocurrances of the value 1 and 9 can eliminated.</span>
localizePairs <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> HypothesesSpace
localizePairs unit <span class="sy0">=</span> <span class="kw1">let</span> pairs <span class="sy0">=</span> V<span class="sy0">.</span>toList <span class="sy0">$</span> V<span class="sy0">.</span><span class="kw3">filter</span> pair unit
        <span class="kw1">in</span> <span class="kw1">if</span> nodups pairs
            <span class="kw1">then</span> <span class="kw3">return</span> unit
            <span class="kw1">else</span>
                <span class="kw1">case</span> <span class="kw3">map</span> <span class="kw3">head</span> <span class="sy0">$</span> <span class="kw3">filter</span> lpair <span class="sy0">$</span> tally pairs <span class="kw1">of</span>
                    <span class="br0">&#91;</span><span class="br0">&#93;</span>          <span class="sy0">-&gt;</span>  <span class="kw3">return</span> unit
                    pl<span class="sy0">@</span><span class="br0">&#40;</span>p:ps<span class="br0">&#41;</span>   <span class="sy0">-&gt;</span>  <span class="kw3">return</span> <span class="sy0">$</span> <span class="kw3">foldl</span>' eliminateFrom unit pl
                        <span class="kw1">where</span> <span class="co1">-- &quot;subtract&quot; pair out of a hypothesis</span>
                            eliminateFrom <span class="sy0">::</span> V<span class="sy0">.</span>Vector Hypothesis <span class="sy0">-&gt;</span> Hypothesis <span class="sy0">-&gt;</span> V<span class="sy0">.</span>Vector Hypothesis
                            eliminateFrom unit p <span class="sy0">=</span> V<span class="sy0">.</span><span class="kw3">map</span> <span class="br0">&#40;</span>\u <span class="sy0">-&gt;</span> <span class="kw1">if</span> u <span class="sy0">/=</span> p <span class="kw1">then</span> u `minus` p <span class="kw1">else</span> u<span class="br0">&#41;</span> unit
&#160;
<span class="co1">-- Level 3 logic resembles the level 2 logic:</span>
<span class="co1">-- If we find exactly three places with the hypothesis {1,7,8} in a given unit, then all other ...</span>
<span class="co1">-- you'll get the gist!</span>
localizeTriples <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> HypothesesSpace
localizeTriples unit <span class="sy0">=</span> <span class="kw1">let</span> triples <span class="sy0">=</span> V<span class="sy0">.</span>toList <span class="sy0">$</span> V<span class="sy0">.</span><span class="kw3">filter</span> triple unit
        <span class="kw1">in</span> <span class="kw1">if</span> nodups triples
            <span class="kw1">then</span> <span class="kw3">return</span> unit
            <span class="kw1">else</span>
                <span class="kw1">case</span> <span class="kw3">map</span> <span class="kw3">head</span> <span class="sy0">$</span> <span class="kw3">filter</span> ltriple <span class="sy0">$</span> tally triples <span class="kw1">of</span>
                    <span class="br0">&#91;</span><span class="br0">&#93;</span>          <span class="sy0">-&gt;</span>  <span class="kw3">return</span> unit
                    tl<span class="sy0">@</span><span class="br0">&#40;</span>t:ts<span class="br0">&#41;</span>   <span class="sy0">-&gt;</span>  <span class="kw3">return</span> <span class="sy0">$</span> <span class="kw3">foldl</span>' eliminateFrom unit tl
                        <span class="kw1">where</span> <span class="co1">-- &quot;subtract&quot; triple out of a hypothesis</span>
                            eliminateFrom <span class="sy0">::</span> V<span class="sy0">.</span>Vector Hypothesis <span class="sy0">-&gt;</span> Hypothesis <span class="sy0">-&gt;</span> V<span class="sy0">.</span>Vector Hypothesis
                            eliminateFrom unit t <span class="sy0">=</span> V<span class="sy0">.</span><span class="kw3">map</span> <span class="br0">&#40;</span>\u <span class="sy0">-&gt;</span> <span class="kw1">if</span> u <span class="sy0">/=</span> t <span class="kw1">then</span> u `minus` t <span class="kw1">else</span> u<span class="br0">&#41;</span> unit
&#160;
<span class="co1">-- Even higher order logic is easy to implement, but becomes rather useless in the general case!</span>
&#160;
<span class="co1">-- Implement the whole nine yard: constraint propagation and search</span>
&#160;
applySameDimensionLogic <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> HypothesesSpace
applySameDimensionLogic hyp0 <span class="sy0">=</span> <span class="kw1">do</span>
        res1 <span class="sy0">&lt;-</span> logicInDimensionBy rows chainedLogic hyp0
        res2 <span class="sy0">&lt;-</span> logicInDimensionBy columns chainedLogic res1
        logicInDimensionBy subGrids chainedLogic res2
            <span class="kw1">where</span>
                chainedLogic <span class="sy0">=</span> localizeSingles <span class="sy0">&gt;=&gt;</span> localizePairs <span class="sy0">&gt;=&gt;</span> localizeTriples
&#160;
logicInDimensionBy <span class="sy0">::</span> <span class="br0">&#40;</span>HypothesesSpace <span class="sy0">-&gt;</span> HypothesesSpace<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="br0">&#40;</span>HypothesesSpace <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> HypothesesSpace<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> HypothesesSpace <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> HypothesesSpace
logicInDimensionBy trafo logic hyp <span class="sy0">=</span> liftM <span class="br0">&#40;</span>trafo <span class="sy0">.</span> V<span class="sy0">.</span><span class="kw3">concat</span><span class="br0">&#41;</span> <span class="sy0">$</span> <span class="kw3">mapM</span> <span class="br0">&#40;</span>\ridx <span class="sy0">-&gt;</span> <span class="kw1">do</span> logic <span class="sy0">$</span> V<span class="sy0">.</span>unsafeSlice ridx 9 hyp'<span class="br0">&#41;</span> <span class="br0">&#91;</span>r<span class="sy0">*</span>9 <span class="sy0">|</span> r<span class="sy0">&lt;-</span> <span class="br0">&#91;</span>0<span class="sy0">..</span>8<span class="br0">&#93;</span><span class="br0">&#93;</span>
        <span class="kw1">where</span>
            hyp' <span class="sy0">::</span> HypothesesSpace
            hyp' <span class="sy0">=</span> trafo hyp
&#160;
prune <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> HypothesesSpace
prune hypS0 <span class="sy0">=</span> <span class="kw1">do</span>
        hypS1 <span class="sy0">&lt;-</span> applySameDimensionLogic <span class="sy0">=&lt;&lt;</span> enforceConsistency hypS0
        <span class="kw1">if</span> V<span class="sy0">.</span><span class="kw3">any</span> newSingle hypS1
            <span class="kw1">then</span> prune hypS1    <span class="co1">-- effectively implemented constraint propagation</span>
            <span class="kw1">else</span> <span class="kw1">do</span>
                hypS2 <span class="sy0">&lt;-</span> applySameDimensionLogic hypS1
                <span class="kw1">if</span> hypS1 <span class="sy0">/=</span> hypS2
                    <span class="kw1">then</span> prune hypS2    <span class="co1">-- effectively implemented a fix point method</span>
                    <span class="kw1">else</span> <span class="kw3">return</span> hypS2
&#160;
search <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> HypothesesSpace
search hypS0
        <span class="sy0">|</span> complete hypS0    <span class="sy0">=</span> <span class="kw3">return</span> hypS0
        <span class="sy0">|</span> <span class="kw3">otherwise</span>         <span class="sy0">=</span> <span class="kw1">do</span> msum <span class="br0">&#91;</span>prune hypS1 <span class="sy0">&gt;&gt;=</span> search <span class="sy0">|</span> hypS1 <span class="sy0">&lt;-</span> expandFirst hypS0<span class="br0">&#93;</span>
&#160;
<span class="co1">-- guessing order makes a big difference!!</span>
expandFirst <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>HypothesesSpace<span class="br0">&#93;</span>
expandFirst hypS
        <span class="sy0">|</span> suitable <span class="sy0">==</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>    <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
        <span class="sy0">|</span> <span class="kw3">otherwise</span>         <span class="sy0">=</span> <span class="kw1">let</span> <span class="br0">&#40;</span><span class="sy0">_,</span> idx<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw3">minimum</span> suitable <span class="co1">-- minimum is the preferred strategy!</span>
                              <span class="kw1">in</span> <span class="kw3">map</span> <span class="br0">&#40;</span>\choice <span class="sy0">-&gt;</span> hypS V<span class="sy0">.//</span> <span class="br0">&#91;</span><span class="br0">&#40;</span>idx<span class="sy0">,</span> choice<span class="br0">&#41;</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>split <span class="sy0">$</span> hypS V<span class="sy0">.!</span> idx<span class="br0">&#41;</span>
    <span class="kw1">where</span>
        suitable <span class="sy0">=</span> <span class="kw3">filter</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="sy0">&gt;</span>1<span class="br0">&#41;</span> <span class="sy0">.</span> <span class="kw3">fst</span><span class="br0">&#41;</span> <span class="sy0">$</span> V<span class="sy0">.</span>toList <span class="sy0">$</span> V<span class="sy0">.</span>imap <span class="br0">&#40;</span>\idx e <span class="sy0">-&gt;</span> <span class="br0">&#40;</span>numChoices e<span class="sy0">,</span> idx<span class="br0">&#41;</span><span class="br0">&#41;</span> hypS
&#160;
<span class="co1">-- Some very useful tools:</span>
<span class="co1">-- partition a list into sublists</span>
chop            <span class="sy0">::</span> <span class="kw4">Int</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="br0">&#91;</span>a<span class="br0">&#93;</span><span class="br0">&#93;</span>
chop n <span class="br0">&#91;</span><span class="br0">&#93;</span>       <span class="sy0">=</span>  <span class="br0">&#91;</span><span class="br0">&#93;</span>
chop n xs       <span class="sy0">=</span>  <span class="kw3">take</span> n xs&#160;: chop n <span class="br0">&#40;</span><span class="kw3">drop</span> n xs<span class="br0">&#41;</span>
&#160;
<span class="co1">-- when does a list have no duplicates</span>
nodups          <span class="sy0">::</span> <span class="kw4">Eq</span> a <span class="sy0">=&gt;</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="kw4">Bool</span>
nodups <span class="br0">&#91;</span><span class="br0">&#93;</span>       <span class="sy0">=</span>  True
nodups <span class="br0">&#40;</span>x:xs<span class="br0">&#41;</span>   <span class="sy0">=</span>  <span class="kw3">not</span> <span class="br0">&#40;</span><span class="kw3">elem</span> x xs<span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> nodups xs
&#160;
dups            <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> <span class="kw4">Bool</span>
dups t          <span class="sy0">=</span> <span class="br0">&#40;</span>filterDups t<span class="br0">&#41;</span> <span class="sy0">/=</span> 0
&#160;
tally           <span class="sy0">::</span> <span class="kw4">Ord</span> a <span class="sy0">=&gt;</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="br0">&#91;</span>a<span class="br0">&#93;</span><span class="br0">&#93;</span>
tally           <span class="sy0">=</span> group <span class="sy0">.</span> sort
&#160;
empty           <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> <span class="kw4">Bool</span>
empty n         <span class="sy0">=</span> <span class="br0">&#40;</span>maskChoices n<span class="br0">&#41;</span> <span class="sy0">==</span> 0
&#160;
single          <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> <span class="kw4">Bool</span>
single n        <span class="sy0">=</span> <span class="br0">&#40;</span>numChoices n<span class="br0">&#41;</span> <span class="sy0">==</span> 1
&#160;
lsingle         <span class="sy0">::</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="kw4">Bool</span>
lsingle <span class="br0">&#91;</span>n<span class="br0">&#93;</span>     <span class="sy0">=</span> True
lsingle <span class="sy0">_</span>       <span class="sy0">=</span> False
&#160;
pair            <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> <span class="kw4">Bool</span>
pair n          <span class="sy0">=</span> numChoices n <span class="sy0">==</span> 2
&#160;
lpair           <span class="sy0">::</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="kw4">Bool</span>
lpair <span class="br0">&#40;</span>x:xs<span class="br0">&#41;</span>    <span class="sy0">=</span> lsingle xs
lpair <span class="sy0">_</span>         <span class="sy0">=</span> False
&#160;
triple          <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> <span class="kw4">Bool</span>
triple n        <span class="sy0">=</span> <span class="br0">&#40;</span>numChoices n<span class="br0">&#41;</span> <span class="sy0">==</span> 3
&#160;
ltriple         <span class="sy0">::</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="kw4">Bool</span>
ltriple <span class="br0">&#40;</span>x:xs<span class="br0">&#41;</span>  <span class="sy0">=</span> lpair xs
ltriple <span class="sy0">_</span>       <span class="sy0">=</span> False
&#160;
complete        <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> <span class="kw4">Bool</span>
complete        <span class="sy0">=</span> V<span class="sy0">.</span><span class="kw3">all</span> single
&#160;
<span class="co1">-- The bit gymnastics (wish some were implemented in Data.Bits)</span>
<span class="co1">-- bits 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 .. 27 28 29 30 31 represents</span>
<span class="co1">--      h - h - h - h - h - h  -  h  -  h  -  h  -  .. s  l  l  l  l</span>
<span class="co1">-- with</span>
<span class="co1">--      h&#160;: 1 iff element is part of the hypothesis set</span>
<span class="co1">--      l&#160;: 4 bits for the cached number of h bits set</span>
<span class="co1">--      s&#160;: 1 iff a single solution for the cell is found</span>
&#160;
<span class="co1">-- experiment with different strategies</span>
split           <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>Hypothesis<span class="br0">&#93;</span>
split 0         <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
split n         <span class="sy0">=</span> <span class="br0">&#91;</span>n `minus` bit1<span class="sy0">,</span> <span class="br0">&#40;</span>bit 28<span class="br0">&#41;</span> <span class="sy0">.|.</span> bit1<span class="br0">&#93;</span>
    <span class="kw1">where</span> bit1 <span class="sy0">=</span> <span class="br0">&#40;</span>bit <span class="sy0">$</span> firstBit n<span class="br0">&#41;</span>
&#160;
minus           <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> Hypothesis <span class="sy0">-&gt;</span> Hypothesis
xs `minus` ys
        <span class="sy0">|</span> maskChoices <span class="br0">&#40;</span>xs <span class="sy0">.</span>&amp;<span class="sy0">.</span> ys<span class="br0">&#41;</span> <span class="sy0">==</span> 0  <span class="sy0">=</span> xs
        <span class="sy0">|</span> <span class="kw3">otherwise</span> <span class="sy0">=</span> zs <span class="sy0">.|.</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>countBits zs<span class="br0">&#41;</span> `shiftL` 28<span class="br0">&#41;</span>
                        <span class="kw1">where</span> zs <span class="sy0">=</span> maskChoices <span class="sy0">$</span> xs <span class="sy0">.</span>&amp;<span class="sy0">.</span> <span class="br0">&#40;</span>complement ys<span class="br0">&#41;</span>
&#160;
numChoices      <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> Word32
numChoices n    <span class="sy0">=</span> <span class="br0">&#40;</span>n `shiftR` 28<span class="br0">&#41;</span> 
&#160;
newSingle       <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> <span class="kw4">Bool</span>
newSingle n     <span class="sy0">=</span> <span class="br0">&#40;</span>n `shiftR` 27<span class="br0">&#41;</span> <span class="sy0">==</span> 2
&#160;
isSolution      <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> <span class="kw4">Bool</span>
isSolution n    <span class="sy0">=</span> n `testBit` 27
&#160;
setSolution     <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> Hypothesis
setSolution n   <span class="sy0">=</span> n `setBit` 27
&#160;
maskChoices     <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> Hypothesis
maskChoices n   <span class="sy0">=</span>  n <span class="sy0">.</span>&amp;<span class="sy0">.</span> 0x07FFFFFF
&#160;
intersect       <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> Hypothesis <span class="sy0">-&gt;</span> Hypothesis
intersect x y   <span class="sy0">=</span> z <span class="sy0">.|.</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>countBits z<span class="br0">&#41;</span> `shiftL` 28<span class="br0">&#41;</span>
                    <span class="kw1">where</span> z <span class="sy0">=</span> maskChoices <span class="sy0">$</span> x <span class="sy0">.</span>&amp;<span class="sy0">.</span> y
&#160;
countBits       <span class="sy0">::</span> Word32 <span class="sy0">-&gt;</span> Word32 <span class="co1">-- would be wonderful if Data.Bits had such a function</span>
countBits 0     <span class="sy0">=</span> 0
countBits n     <span class="sy0">=</span> <span class="br0">&#40;</span>cBLH 16 0xFFFF <span class="sy0">.</span> cBLH 8 0xFF00FF <span class="sy0">.</span> cBLH 4 0x0F0F0F0F <span class="sy0">.</span> cBLH 2 0x33333333 <span class="sy0">.</span> cBLH 1 0x55555555<span class="br0">&#41;</span> n
cBLH            <span class="sy0">::</span> <span class="kw4">Int</span> <span class="sy0">-&gt;</span> Word32 <span class="sy0">-&gt;</span> Word32 <span class="sy0">-&gt;</span> Word32
cBLH s mask n   <span class="sy0">=</span> <span class="br0">&#40;</span>n <span class="sy0">.</span>&amp;<span class="sy0">.</span> mask<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="br0">&#40;</span>n `shiftR` s<span class="br0">&#41;</span> <span class="sy0">.</span>&amp;<span class="sy0">.</span> mask
&#160;
firstBit        <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> <span class="kw4">Int</span> <span class="co1">-- should also be in Data.Bits</span>
firstBit <span class="nu0">0</span>      <span class="sy0">=</span> <span class="nu0">0</span> <span class="co1">-- stop recursion&#160;!!</span>
firstBit n
        <span class="sy0">|</span> n <span class="sy0">.</span>&amp;<span class="sy0">.</span> 1 <span class="sy0">&gt;</span> 0       <span class="sy0">=</span> 0
        <span class="sy0">|</span> <span class="kw3">otherwise</span>         <span class="sy0">=</span> <span class="br0">&#40;</span><span class="sy0">+</span><span class="br0">&#41;</span> 1 <span class="sy0">$</span> firstBit <span class="sy0">$</span> n `shiftR` 1
&#160;
accumTally      <span class="sy0">::</span> V<span class="sy0">.</span>Vector Hypothesis <span class="sy0">-&gt;</span> Hypothesis
accumTally nl   <span class="sy0">=</span> V<span class="sy0">.</span><span class="kw3">foldl</span>' accumTally2 <span class="nu0">0</span> nl
accumTally2     <span class="sy0">::</span> Word32 <span class="sy0">-&gt;</span> Word32 <span class="sy0">-&gt;</span> Word32
accumTally2 t n <span class="sy0">=</span> <span class="br0">&#40;</span><span class="sy0">+</span><span class="br0">&#41;</span> t <span class="sy0">$</span> n <span class="sy0">.</span>&amp;<span class="sy0">.</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>complement t<span class="br0">&#41;</span> <span class="sy0">.</span>&amp;<span class="sy0">.</span> 0x02AAAAAA<span class="br0">&#41;</span> `shiftR` <span class="nu0">1</span><span class="br0">&#41;</span>
&#160;
filterSingles   <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> Hypothesis
filterSingles t <span class="sy0">=</span> t <span class="sy0">.</span>&amp;<span class="sy0">.</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>complement t<span class="br0">&#41;</span> <span class="sy0">.</span>&amp;<span class="sy0">.</span> 0x02AAAAAA<span class="br0">&#41;</span> `shiftR` <span class="nu0">1</span><span class="br0">&#41;</span>
&#160;
filterDups      <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> Hypothesis
filterDups t    <span class="sy0">=</span> <span class="br0">&#40;</span>t <span class="sy0">.</span>&amp;<span class="sy0">.</span> 0x02AAAAAA<span class="br0">&#41;</span> `shiftR` <span class="nu0">1</span>
&#160;
defaultHypothesis <span class="sy0">::</span> Hypothesis
defaultHypothesis <span class="sy0">=</span> 0x90015555 <span class="co1">-- all nine alphabet elements are set</span>
&#160;
mapAlphabet <span class="sy0">::</span> V<span class="sy0">.</span>Vector Hypothesis
mapAlphabet <span class="sy0">=</span> V<span class="sy0">.</span>replicate 256 defaultHypothesis V<span class="sy0">.//</span> validDigits
    <span class="kw1">where</span>
        validDigits <span class="sy0">::</span> <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">Int</span><span class="sy0">,</span> Hypothesis<span class="br0">&#41;</span><span class="br0">&#93;</span>
        validDigits <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#40;</span>ord i<span class="sy0">,</span> <span class="br0">&#40;</span>bit 28<span class="br0">&#41;</span> <span class="sy0">.|.</span> <span class="br0">&#40;</span>bit <span class="sy0">$</span> 2<span class="sy0">*</span><span class="br0">&#40;</span>ord i <span class="sy0">-</span> 49<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">|</span> i <span class="sy0">&lt;-</span> <span class="st0">&quot;123456789&quot;</span><span class="br0">&#93;</span>
&#160;
toChar <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="kw4">Char</span><span class="br0">&#93;</span>
toChar s
        <span class="sy0">|</span> single s      <span class="sy0">=</span> <span class="br0">&#91;</span>normalize s<span class="br0">&#93;</span>
        <span class="sy0">|</span> <span class="kw3">otherwise</span>     <span class="sy0">=</span> <span class="st0">&quot;.&quot;</span>
        <span class="kw1">where</span>
            normalize s <span class="sy0">=</span> chr <span class="sy0">$</span> <span class="br0">&#40;</span><span class="sy0">+</span><span class="br0">&#41;</span> 49 <span class="sy0">$</span> <span class="br0">&#40;</span>firstBit s<span class="br0">&#41;</span> `shiftR` 1
&#160;
toCharDebug <span class="sy0">::</span> Hypothesis <span class="sy0">-&gt;</span> <span class="br0">&#91;</span><span class="kw4">Char</span><span class="br0">&#93;</span>
toCharDebug s
        <span class="sy0">|</span> isSolution s          <span class="sy0">=</span> <span class="br0">&#91;</span>'<span class="sy0">!</span>'<span class="sy0">,</span> normalize s<span class="br0">&#93;</span>
        <span class="sy0">|</span> single s              <span class="sy0">=</span> <span class="br0">&#91;</span>normalize s<span class="br0">&#93;</span>
        <span class="sy0">|</span> <span class="kw3">otherwise</span>             <span class="sy0">=</span> <span class="st0">&quot;{&quot;</span> <span class="sy0">++</span> digits <span class="sy0">++</span> <span class="st0">&quot;}&quot;</span>
        <span class="kw1">where</span>
            normalize s <span class="sy0">=</span> chr <span class="sy0">$</span> <span class="br0">&#40;</span><span class="sy0">+</span><span class="br0">&#41;</span> 49 <span class="sy0">$</span> <span class="br0">&#40;</span>firstBit s<span class="br0">&#41;</span> `shiftR` 1
            digits <span class="sy0">=</span> <span class="kw3">zipWith</span> test <span class="st0">&quot;123456789&quot;</span> <span class="sy0">$</span> <span class="kw3">iterate</span> <span class="br0">&#40;</span>\e <span class="sy0">-&gt;</span> e `shiftR` 2<span class="br0">&#41;</span> s
            test c e
                    <span class="sy0">|</span> e<span class="sy0">.</span>&amp;<span class="sy0">.</span>1 <span class="sy0">==</span> 1    <span class="sy0">=</span> c
                    <span class="sy0">|</span> <span class="kw3">otherwise</span>     <span class="sy0">=</span> '<span class="sy0">.</span>'
&#160;
<span class="co1">-- Initial hypothesis space </span>
initialize <span class="sy0">::</span> <span class="kw4">String</span> <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> HypothesesSpace
initialize g <span class="sy0">=</span>  <span class="kw1">if</span> <span class="kw3">all</span> <span class="br0">&#40;</span>`<span class="kw3">elem</span>` <span class="st0">&quot;0.-123456789&quot;</span><span class="br0">&#41;</span> g
                <span class="kw1">then</span>
                    <span class="kw1">let</span>
                        hints <span class="sy0">=</span> <span class="kw3">zip</span> <span class="br0">&#91;</span>0<span class="sy0">..</span><span class="br0">&#93;</span> translated
                        translated <span class="sy0">=</span> <span class="kw3">map</span>  <span class="br0">&#40;</span>\c <span class="sy0">-&gt;</span> mapAlphabet V<span class="sy0">.!</span> ord c<span class="br0">&#41;</span> <span class="sy0">$</span> <span class="kw3">take</span> ncells g
                    <span class="kw1">in</span> Just <span class="sy0">$</span> <span class="br0">&#40;</span>V<span class="sy0">.</span>replicate ncells defaultHypothesis<span class="br0">&#41;</span> V<span class="sy0">.//</span> hints
                <span class="kw1">else</span> Nothing
&#160;
<span class="co1">-- Display (partial) solution</span>
printResultD <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> <span class="kw4">IO</span> <span class="br0">&#40;</span><span class="br0">&#41;</span>
printResultD <span class="sy0">=</span> <span class="kw3">putStrLn</span> <span class="sy0">.</span> toString
    <span class="kw1">where</span>
        toString <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> <span class="kw4">String</span>
        toString hyp <span class="sy0">=</span> <span class="kw3">unlines</span> <span class="sy0">$</span> <span class="kw3">map</span> translate <span class="sy0">.</span> chop 9 <span class="sy0">$</span> V<span class="sy0">.</span>toList hyp
            <span class="kw1">where</span>
                translate <span class="sy0">=</span> <span class="kw3">concatMap</span> <span class="br0">&#40;</span>\s <span class="sy0">-&gt;</span> toCharDebug s <span class="sy0">++</span> <span class="st0">&quot; &quot;</span><span class="br0">&#41;</span>
&#160;
printResult <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> <span class="kw4">IO</span> <span class="br0">&#40;</span><span class="br0">&#41;</span>
printResult <span class="sy0">=</span> <span class="kw3">putStrLn</span> <span class="sy0">.</span> toString
    <span class="kw1">where</span>
        toString <span class="sy0">::</span> HypothesesSpace <span class="sy0">-&gt;</span> <span class="kw4">String</span>
        toString hyp <span class="sy0">=</span> translate <span class="br0">&#40;</span>V<span class="sy0">.</span>toList hyp<span class="br0">&#41;</span>
            <span class="kw1">where</span>
                translate <span class="sy0">=</span> <span class="kw3">concatMap</span> <span class="br0">&#40;</span>\s <span class="sy0">-&gt;</span> toChar s <span class="sy0">++</span> <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span>
&#160;
<span class="co1">-- The entire solution process!</span>
solve <span class="sy0">::</span> <span class="kw4">String</span> <span class="sy0">-&gt;</span> <span class="kw4">Maybe</span> HypothesesSpace
solve str <span class="sy0">=</span> <span class="kw1">do</span>
    initialize str <span class="sy0">&gt;&gt;=</span> prune <span class="sy0">&gt;&gt;=</span> search
&#160;
main <span class="sy0">::</span> <span class="kw4">IO</span> <span class="br0">&#40;</span><span class="br0">&#41;</span>
main <span class="sy0">=</span> <span class="kw1">do</span>
    <span class="br0">&#91;</span>f<span class="br0">&#93;</span> <span class="sy0">&lt;-</span> getArgs
    sudoku <span class="sy0">&lt;-</span> <span class="kw3">fmap</span> <span class="kw3">lines</span> <span class="sy0">$</span> <span class="kw3">readFile</span> f <span class="co1">-- &quot;test.txt&quot;</span>
    <span class="kw3">mapM_</span> printResult <span class="sy0">$</span> mapMaybe solve sudoku</pre></div></div>
<h2> <span class="mw-headline" id="List_comprehensions">22  List comprehensions </span></h2>
<p>by Ben Lynn.
</p><p>Translated from my <a rel="nofollow" class="external text" href="http://benlynn.blogspot.com/2012/04/sudoku-knuth-vs-norvig-vs-cohen.html">brute force solver in C</a>:
</p>
<div dir="ltr" class="mw-geshi mw-content-ltr"><div class="haskell source-haskell" style="font-family:monospace;"><pre class="de1"><span class="kw1">module</span> Main <span class="kw1">where</span>
f x s<span class="sy0">@</span><span class="br0">&#40;</span>h:y<span class="br0">&#41;</span><span class="sy0">=</span><span class="kw1">let</span><span class="br0">&#40;</span>r<span class="sy0">,</span>c<span class="br0">&#41;</span><span class="sy0">=</span><span class="kw3">divMod</span><span class="br0">&#40;</span><span class="kw3">length</span> x<span class="br0">&#41;</span><span class="nu0">9</span>;m#n<span class="sy0">=</span>m`<span class="kw3">div</span>`3<span class="sy0">==</span>n`<span class="kw3">div</span>`<span class="nu0">3</span>;e<span class="sy0">=</span><span class="br0">&#91;</span>0<span class="sy0">..</span>8<span class="br0">&#93;</span><span class="kw1">in</span>
  <span class="br0">&#91;</span>a<span class="sy0">|</span>z<span class="sy0">&lt;-</span><span class="br0">&#91;</span>'1'<span class="sy0">..</span>'9'<span class="br0">&#93;</span><span class="sy0">,</span>h<span class="sy0">==</span>z<span class="sy0">||</span>h<span class="sy0">==</span>'<span class="sy0">.</span>'<span class="sy0">&amp;&amp;</span>notElem z<span class="br0">&#40;</span><span class="kw3">map</span><span class="br0">&#40;</span><span class="br0">&#40;</span>x<span class="sy0">++</span>s<span class="br0">&#41;</span><span class="sy0">!!</span><span class="br0">&#41;</span><span class="br0">&#91;</span>i<span class="sy0">*</span>9<span class="sy0">+</span>j<span class="sy0">|</span>i<span class="sy0">&lt;-</span>e<span class="sy0">,</span>
  j<span class="sy0">&lt;-</span>e<span class="sy0">,</span>i<span class="sy0">==</span>r<span class="sy0">||</span>j<span class="sy0">==</span>c<span class="sy0">||</span>i#r<span class="sy0">&amp;&amp;</span>j#c<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">,</span>a<span class="sy0">&lt;-</span>f<span class="br0">&#40;</span>x<span class="sy0">++</span><span class="br0">&#91;</span>z<span class="br0">&#93;</span><span class="br0">&#41;</span>y<span class="br0">&#93;</span>
f x<span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="br0">&#91;</span>x<span class="br0">&#93;</span>
&#160;
main<span class="sy0">=</span><span class="kw3">print</span><span class="sy0">$</span>f<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="st0">&quot;53..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79&quot;</span></pre></div></div>
<h2> <span class="mw-headline" id="Add_your_own">23  Add your own </span></h2>
<p>If you have a Sudoku solver you're proud of, put it here. This ought to be a good way of helping people learn some fun, intermediate-advanced techniques in Haskell.
</p>
<h2> <span class="mw-headline" id="Test_boards">24  Test boards </span></h2>
<p>Here's an input file to test the solvers on. Zeroes represent blanks.
</p>
<pre>
0 5 0 0 6 0 0 0 1
0 0 4 8 0 0 0 7 0
8 0 0 0 0 0 0 5 2
2 0 0 0 5 7 0 3 0
0 0 0 0 0 0 0 0 0
0 3 0 6 9 0 0 0 5
7 9 0 0 0 0 0 0 8
0 1 0 0 0 6 5 0 0
5 0 0 0 3 0 0 6 0
</pre>
<p>A nefarious one:
</p>
<pre>
0 0 0 0 6 0 0 8 0
0 2 0 0 0 0 0 0 0
0 0 1 0 0 0 0 0 0
0 7 0 0 0 0 1 0 2
5 0 0 0 3 0 0 0 0
0 0 0 0 0 0 4 0 0
0 0 4 2 0 1 0 0 0
3 0 0 7 0 0 6 0 0
0 0 0 0 0 0 0 5 0 
</pre>
<p>Chris Kuklewicz writes, "You can get over 47,000 distict minimal puzzles from
<a rel="nofollow" class="external text" href="http://www.csse.uwa.edu.au/~gordon/sudokumin.php">csse.uwa.edu</a> that have only 17 clues. Then you can run all of them through your program to locate the most evil ones, and use them on your associates."
</p>
<!-- 
NewPP limit report
Preprocessor node count: 288/1000000
Post‐expand include size: 114/2097152 bytes
Template argument size: 38/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1698-0!*!0!1!en!*!* and timestamp 20141003035451 -->
</div><div class="printfooter">
Retrieved from "<a href="http://www.haskell.org/haskellwiki/index.php?title=Sudoku&amp;oldid=56707">http://www.haskell.org/haskellwiki/index.php?title=Sudoku&amp;oldid=56707</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/haskellwiki/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="/haskellwiki/Category:Code" title="Category:Code">Code</a></li></ul></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div></div>
		<div id="column-one">
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage"><a href="/haskellwiki/Haskell">Haskell</a></li>
				<li id="n-portal"><a href="/haskellwiki/HaskellWiki:Community">Wiki community</a></li>
				<li id="n-recentchanges"><a href="/haskellwiki/Special:RecentChanges">Recent changes</a></li>
				<li id="n-randompage"><a href="/haskellwiki/Special:Random">Random page</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/haskellwiki/Special:WhatLinksHere/Sudoku">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/haskellwiki/Special:RecentChangesLinked/Sudoku">Related changes</a></li>
<li id="t-specialpages"><a href="/haskellwiki/Special:SpecialPages">Special pages</a></li>
				<li id="t-print"><a href="/haskellwiki/index.php?title=Sudoku&amp;printable=yes" rel="alternate">Printable version</a></li>				<li id="t-permalink"><a href="/haskellwiki/index.php?title=Sudoku&amp;oldid=56707">Permanent link</a></li>			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="//www.mediawiki.org/"><img src="/wikistatic/skins//common/images/poweredby_mediawiki_88x31.png" height="31" width="88" alt="Powered by MediaWiki" /></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 31 August 2013, at 06:50.</li>
					<li id="viewcount">This page has been accessed 70,350 times.</li>
					<li id="copyright">Recent content is available under <a href="/haskellwiki/HaskellWiki:Copyrights" title="HaskellWiki:Copyrights">a simple permissive license</a>.</li>
					<li id="privacy"><a href="/haskellwiki/HaskellWiki:Privacy_policy" title="HaskellWiki:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/haskellwiki/HaskellWiki:About" title="HaskellWiki:About">About HaskellWiki</a></li>
					<li id="disclaimer"><a href="/haskellwiki/HaskellWiki:General_disclaimer" title="HaskellWiki:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>
<script>if(window.mw){
mw.loader.load(["mediawiki.user","mediawiki.page.ready"], null, true);
}</script>
<script src="http://www.haskell.org/haskellwiki/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=hawiki&amp;*"></script>
<!-- Served in 0.103 secs. --><script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-15375175-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body></html>
